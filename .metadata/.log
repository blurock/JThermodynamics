!SESSION 2019-01-01 02:00:35.655 -----------------------------------------------
eclipse.buildId=4.17.0.I20200902-1800
java.version=14.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=macosx, ARCH=x86_64, WS=cocoa, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.jee.product -keyring /Users/edwardblurock/.eclipse_keyring
Command-line arguments:  -os macosx -ws cocoa -arch x86_64 -product org.eclipse.epp.package.jee.product -keyring /Users/edwardblurock/.eclipse_keyring

This is a continuation of log file /Users/edwardblurock/git/JThermodynamics2/.metadata/.bak_2.log
Created Time: 2021-02-11 12:01:52.567

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-02-11 12:01:52.567
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:167)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:152)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-02-11 12:01:52.568
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:167)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:152)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-02-11 12:02:04.449
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package thermo.build.test;

import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;

import org.openscience.cdk.exception.CDKException;
import org.openscience.cdk.interfaces.IAtomContainer;

import thermo.data.benson.SetOfBensonThermodynamicBase;
import thermo.data.benson.DB.ThermoSQLConnection;
import thermo.data.structure.linearform.NancyLinearFormToMolecule;
import thermo.data.structure.structure.SetOfMetaAtomsForSubstitution;
import thermo.data.structure.structure.StructureAsCML;
import thermo.data.structure.structure.DB.SQLMetaAtomDefinitionFromMetaAtomInfo;
import thermo.exception.ThermodynamicException;

public class CorrectionElementTests {
	static ThermoSQLConnection connection;
	static String type;
	static String specificTest = "";
	static String nancyS = "";
	static StringBuffer buf;
	static ArrayList<String> arguments;
	static boolean foundCommand;
	static IAtomContainer molecule;

	static String singleTest = "Single";
	static String fullTest = "Full";
	static String listelements = "List";
	static String elementS = "Element";
	static String opticalTestS = "OpticalSymmetryTest";
	static String bensonAtomTestS = "BensonAtomTest";

	/**
	 * @param args the command line arguments
	 */
	public static boolean executeCommand(String[] args) {
		if (setup(args)) {
			if (type.equalsIgnoreCase(opticalTestS)) {
				testOpticalSymmetry();
			} else if (type.equalsIgnoreCase(bensonAtomTestS)) {

			}
			System.out.println(buf.toString());
		}
		return foundCommand;
	}

	public static void commands() {
		System.out.println("Expecting the type of Tests:");
		System.out.println(opticalTestS + ":  Test an optical symmetry element(s)");
	}

	public static boolean setup(String[] args) {
		boolean success = true;
		if (args.length < 1) {
			foundCommand = false;
			success = false;
		} else {
			String type = args[0];
			if (type.equalsIgnoreCase(opticalTestS) || type.equalsIgnoreCase(bensonAtomTestS)) {
				if (args.length < 3) {
					opticalSymmetryCommands();
					success = false;
				} else {
					specificTest = args[1];
					nancyS = args[2];

					connection = new ThermoSQLConnection();
					connection.connect();

					IAtomContainer molecule = getMolecule();
					if (molecule != null) {
						buf = new StringBuffer();

						arguments = new ArrayList<String>();
						for (int i = 3; i < args.length; i++) {
							arguments.add(args[i]);
						}
					} else {
						success = false;
					}
				}
			} else {
				foundCommand = false;
				success = false;
			}
		}
		return success;
	}

	public static IAtomContainer getMolecule() {
		NancyLinearFormToMolecule nancyFormToMolecule;
		IAtomContainer molecule = null;
		try {
			nancyFormToMolecule = new NancyLinearFormToMolecule(connection);
			molecule = nancyFormToMolecule.convert(nancyS);

			buf.append("Molecule  -----------------------------------------------\n");
			StructureAsCML cmlstruct = new StructureAsCML(molecule);
			buf.append(cmlstruct.toString() + "\n");
			buf.append("Molecule  -----------------------------------------------\n");
		} catch (SQLException e) {
			System.out.println("Invalid Nancy Linear Form: " + nancyS);
		} catch (CDKException e) {
			System.out.println("Invalid Nancy Linear Form: " + nancyS);
		}
		return molecule;
	}

	private static void testOpticalSymmetry() {
		boolean success = true;
		SetOfBensonThermodynamicBase thermoset = new SetOfBensonThermodynamicBase();
		try {
			ThermoSQLConnection connection = new ThermoSQLConnection();
			connection.connect();

			if (specificTest.equalsIgnoreCase(singleTest)) {
				if(arguments.size() < 1) {
					System.out.println("Expecting optical symmetry name");
					opticalSymmetryCommands();
				} else {
					thermoset = TestOpticalSymmetryElement.performSingleTest(buf, molecule, connection, arguments.get(0));
				}
			} else if (specificTest.equalsIgnoreCase(fullTest)) {
				thermoset = TestOpticalSymmetryElement.performWithFullSet(buf, molecule, connection);
			}
		} catch (SQLException e) {
			buf.append(e.toString());
			success = false;
		} catch (CDKException e) {
			buf.append(e.toString());
			success = false;
		} catch (ThermodynamicException e) {
			buf.append(e.toString());
			success = false;
		}
		if (success) {
			if (thermoset.size() > 0) {
				buf.append("======================================================\n");
				buf.append(thermoset.toString());
				buf.append("======================================================\n");
			} else {
				buf.append("No symmetry corrections computed\n");
			}
		}
	}
	
	private static void metaAtomTest() {
		boolean success = true;
		String bensonAtomType = "BensonAtom";
		SetOfMetaAtomsForSubstitution metaAtomSubstitutions;
		SQLMetaAtomDefinitionFromMetaAtomInfo sqlMetaAtom;
		sqlMetaAtom = new SQLMetaAtomDefinitionFromMetaAtomInfo(connect);
			metaAtomSubstitutions = sqlMetaAtom.createSubstitutionSets(bensonAtomType);
		
		if(specificTest.equalsIgnoreCase(singleTest)) {
	        IAtomContainer substituted = metaAtomSubstitutions.substitute(molecule);
	        buf.append("computeThermodynamicsForMolecule  after meta-atom substitutions\n");
	        StructureAsCML cmlstruct = new StructureAsCML(substituted);
	        buf.append(cmlstruct.toString());
			} catch (ClassNotFoundException | SQLException | CDKException | IOException e) {
				buf.append(e.toString());
			}
	}
	}

	private static void opticalSymmetryCommands() {
		System.out.println(opticalTestS + " SymmetryElement NancyString");
		System.out.println("Test type: " + singleTest + " or " + fullTest);
		System.out.println("NancyString: the molecule name as nancy string");
		System.out.println("Single test:");
		System.out.println("     SymmetryElement: The name of the optical symmetry element");

	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:167)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:152)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-02-11 12:02:04.449
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:167)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:152)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-02-11 12:02:04.451
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:167)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:152)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-02-11 12:02:12.523
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package thermo.build.test;

import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;

import org.openscience.cdk.exception.CDKException;
import org.openscience.cdk.interfaces.IAtomContainer;

import thermo.data.benson.SetOfBensonThermodynamicBase;
import thermo.data.benson.DB.ThermoSQLConnection;
import thermo.data.structure.linearform.NancyLinearFormToMolecule;
import thermo.data.structure.structure.SetOfMetaAtomsForSubstitution;
import thermo.data.structure.structure.StructureAsCML;
import thermo.data.structure.structure.DB.SQLMetaAtomDefinitionFromMetaAtomInfo;
import thermo.exception.ThermodynamicException;

public class CorrectionElementTests {
	static ThermoSQLConnection connection;
	static String type;
	static String specificTest = "";
	static String nancyS = "";
	static StringBuffer buf;
	static ArrayList<String> arguments;
	static boolean foundCommand;
	static IAtomContainer molecule;

	static String singleTest = "Single";
	static String fullTest = "Full";
	static String listelements = "List";
	static String elementS = "Element";
	static String opticalTestS = "OpticalSymmetryTest";
	static String bensonAtomTestS = "BensonAtomTest";

	/**
	 * @param args the command line arguments
	 */
	public static boolean executeCommand(String[] args) {
		if (setup(args)) {
			if (type.equalsIgnoreCase(opticalTestS)) {
				testOpticalSymmetry();
			} else if (type.equalsIgnoreCase(bensonAtomTestS)) {

			}
			System.out.println(buf.toString());
		}
		return foundCommand;
	}

	public static void commands() {
		System.out.println("Expecting the type of Tests:");
		System.out.println(opticalTestS + ":  Test an optical symmetry element(s)");
	}

	public static boolean setup(String[] args) {
		boolean success = true;
		if (args.length < 1) {
			foundCommand = false;
			success = false;
		} else {
			String type = args[0];
			if (type.equalsIgnoreCase(opticalTestS) || type.equalsIgnoreCase(bensonAtomTestS)) {
				if (args.length < 3) {
					opticalSymmetryCommands();
					success = false;
				} else {
					specificTest = args[1];
					nancyS = args[2];

					connection = new ThermoSQLConnection();
					connection.connect();

					IAtomContainer molecule = getMolecule();
					if (molecule != null) {
						buf = new StringBuffer();

						arguments = new ArrayList<String>();
						for (int i = 3; i < args.length; i++) {
							arguments.add(args[i]);
						}
					} else {
						success = false;
					}
				}
			} else {
				foundCommand = false;
				success = false;
			}
		}
		return success;
	}

	public static IAtomContainer getMolecule() {
		NancyLinearFormToMolecule nancyFormToMolecule;
		IAtomContainer molecule = null;
		try {
			nancyFormToMolecule = new NancyLinearFormToMolecule(connection);
			molecule = nancyFormToMolecule.convert(nancyS);

			buf.append("Molecule  -----------------------------------------------\n");
			StructureAsCML cmlstruct = new StructureAsCML(molecule);
			buf.append(cmlstruct.toString() + "\n");
			buf.append("Molecule  -----------------------------------------------\n");
		} catch (SQLException e) {
			System.out.println("Invalid Nancy Linear Form: " + nancyS);
		} catch (CDKException e) {
			System.out.println("Invalid Nancy Linear Form: " + nancyS);
		}
		return molecule;
	}

	private static void testOpticalSymmetry() {
		boolean success = true;
		SetOfBensonThermodynamicBase thermoset = new SetOfBensonThermodynamicBase();
		try {
			ThermoSQLConnection connection = new ThermoSQLConnection();
			connection.connect();

			if (specificTest.equalsIgnoreCase(singleTest)) {
				if(arguments.size() < 1) {
					System.out.println("Expecting optical symmetry name");
					opticalSymmetryCommands();
				} else {
					thermoset = TestOpticalSymmetryElement.performSingleTest(buf, molecule, connection, arguments.get(0));
				}
			} else if (specificTest.equalsIgnoreCase(fullTest)) {
				thermoset = TestOpticalSymmetryElement.performWithFullSet(buf, molecule, connection);
			}
		} catch (SQLException e) {
			buf.append(e.toString());
			success = false;
		} catch (CDKException e) {
			buf.append(e.toString());
			success = false;
		} catch (ThermodynamicException e) {
			buf.append(e.toString());
			success = false;
		}
		if (success) {
			if (thermoset.size() > 0) {
				buf.append("======================================================\n");
				buf.append(thermoset.toString());
				buf.append("======================================================\n");
			} else {
				buf.append("No symmetry corrections computed\n");
			}
		}
	}
	
	private static void metaAtomTest() {
		boolean success = true;
		String bensonAtomType = "BensonAtom";
		SetOfMetaAtomsForSubstitution metaAtomSubstitutions;
		SQLMetaAtomDefinitionFromMetaAtomInfo sqlMetaAtom;
		sqlMetaAtom = new SQLMetaAtomDefinitionFromMetaAtomInfo(connect);
			metaAtomSubstitutions = sqlMetaAtom.createSubstitutionSets(bensonAtomType);
		
		if(specificTest.equalsIgnoreCase(singleTest)) {
	        IAtomContainer substituted = metaAtomSubstitutions.substitute(molecule);
	        buf.append("computeThermodynamicsForMolecule  after meta-atom substitutions\n");
	        StructureAsCML cmlstruct = new StructureAsCML(substituted);
	        buf.append(cmlstruct.toString());
			} catch (ClassNotFoundException | SQLException | CDKException | IOException e) {
				buf.append(e.toString());
			}
	}

	private static void opticalSymmetryCommands() {
		System.out.println(opticalTestS + " SymmetryElement NancyString");
		System.out.println("Test type: " + singleTest + " or " + fullTest);
		System.out.println("NancyString: the molecule name as nancy string");
		System.out.println("Single test:");
		System.out.println("     SymmetryElement: The name of the optical symmetry element");

	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:449)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:268)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2021-02-11 12:02:12.524
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:449)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:268)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2021-02-11 12:02:12.526
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:449)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:268)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2021-02-11 12:02:12.534
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package thermo.build.test;

import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;

import org.openscience.cdk.exception.CDKException;
import org.openscience.cdk.interfaces.IAtomContainer;

import thermo.data.benson.SetOfBensonThermodynamicBase;
import thermo.data.benson.DB.ThermoSQLConnection;
import thermo.data.structure.linearform.NancyLinearFormToMolecule;
import thermo.data.structure.structure.SetOfMetaAtomsForSubstitution;
import thermo.data.structure.structure.StructureAsCML;
import thermo.data.structure.structure.DB.SQLMetaAtomDefinitionFromMetaAtomInfo;
import thermo.exception.ThermodynamicException;

public class CorrectionElementTests {
	static ThermoSQLConnection connection;
	static String type;
	static String specificTest = "";
	static String nancyS = "";
	static StringBuffer buf;
	static ArrayList<String> arguments;
	static boolean foundCommand;
	static IAtomContainer molecule;

	static String singleTest = "Single";
	static String fullTest = "Full";
	static String listelements = "List";
	static String elementS = "Element";
	static String opticalTestS = "OpticalSymmetryTest";
	static String bensonAtomTestS = "BensonAtomTest";

	/**
	 * @param args the command line arguments
	 */
	public static boolean executeCommand(String[] args) {
		if (setup(args)) {
			if (type.equalsIgnoreCase(opticalTestS)) {
				testOpticalSymmetry();
			} else if (type.equalsIgnoreCase(bensonAtomTestS)) {

			}
			System.out.println(buf.toString());
		}
		return foundCommand;
	}

	public static void commands() {
		System.out.println("Expecting the type of Tests:");
		System.out.println(opticalTestS + ":  Test an optical symmetry element(s)");
	}

	public static boolean setup(String[] args) {
		boolean success = true;
		if (args.length < 1) {
			foundCommand = false;
			success = false;
		} else {
			String type = args[0];
			if (type.equalsIgnoreCase(opticalTestS) || type.equalsIgnoreCase(bensonAtomTestS)) {
				if (args.length < 3) {
					opticalSymmetryCommands();
					success = false;
				} else {
					specificTest = args[1];
					nancyS = args[2];

					connection = new ThermoSQLConnection();
					connection.connect();

					IAtomContainer molecule = getMolecule();
					if (molecule != null) {
						buf = new StringBuffer();

						arguments = new ArrayList<String>();
						for (int i = 3; i < args.length; i++) {
							arguments.add(args[i]);
						}
					} else {
						success = false;
					}
				}
			} else {
				foundCommand = false;
				success = false;
			}
		}
		return success;
	}

	public static IAtomContainer getMolecule() {
		NancyLinearFormToMolecule nancyFormToMolecule;
		IAtomContainer molecule = null;
		try {
			nancyFormToMolecule = new NancyLinearFormToMolecule(connection);
			molecule = nancyFormToMolecule.convert(nancyS);

			buf.append("Molecule  -----------------------------------------------\n");
			StructureAsCML cmlstruct = new StructureAsCML(molecule);
			buf.append(cmlstruct.toString() + "\n");
			buf.append("Molecule  -----------------------------------------------\n");
		} catch (SQLException e) {
			System.out.println("Invalid Nancy Linear Form: " + nancyS);
		} catch (CDKException e) {
			System.out.println("Invalid Nancy Linear Form: " + nancyS);
		}
		return molecule;
	}

	private static void testOpticalSymmetry() {
		boolean success = true;
		SetOfBensonThermodynamicBase thermoset = new SetOfBensonThermodynamicBase();
		try {
			ThermoSQLConnection connection = new ThermoSQLConnection();
			connection.connect();

			if (specificTest.equalsIgnoreCase(singleTest)) {
				if(arguments.size() < 1) {
					System.out.println("Expecting optical symmetry name");
					opticalSymmetryCommands();
				} else {
					thermoset = TestOpticalSymmetryElement.performSingleTest(buf, molecule, connection, arguments.get(0));
				}
			} else if (specificTest.equalsIgnoreCase(fullTest)) {
				thermoset = TestOpticalSymmetryElement.performWithFullSet(buf, molecule, connection);
			}
		} catch (SQLException e) {
			buf.append(e.toString());
			success = false;
		} catch (CDKException e) {
			buf.append(e.toString());
			success = false;
		} catch (ThermodynamicException e) {
			buf.append(e.toString());
			success = false;
		}
		if (success) {
			if (thermoset.size() > 0) {
				buf.append("======================================================\n");
				buf.append(thermoset.toString());
				buf.append("======================================================\n");
			} else {
				buf.append("No symmetry corrections computed\n");
			}
		}
	}
	
	private static void metaAtomTest() {
		boolean success = true;
		String bensonAtomType = "BensonAtom";
		SetOfMetaAtomsForSubstitution metaAtomSubstitutions;
		SQLMetaAtomDefinitionFromMetaAtomInfo sqlMetaAtom;
		sqlMetaAtom = new SQLMetaAtomDefinitionFromMetaAtomInfo(connect);
			metaAtomSubstitutions = sqlMetaAtom.createSubstitutionSets(bensonAtomType);
		
		if(specificTest.equalsIgnoreCase(singleTest)) {
	        IAtomContainer substituted = metaAtomSubstitutions.substitute(molecule);
	        buf.append("computeThermodynamicsForMolecule  after meta-atom substitutions\n");
	        StructureAsCML cmlstruct = new StructureAsCML(substituted);
	        buf.append(cmlstruct.toString());
			} catch (ClassNotFoundException | SQLException | CDKException | IOException e) {
				buf.append(e.toString());
			}
	}

	private static void opticalSymmetryCommands() {
		System.out.println(opticalTestS + " SymmetryElement NancyString");
		System.out.println("Test type: " + singleTest + " or " + fullTest);
		System.out.println("NancyString: the molecule name as nancy string");
		System.out.println("Single test:");
		System.out.println("     SymmetryElement: The name of the optical symmetry element");

	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:167)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:152)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-02-11 12:02:12.535
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:167)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:152)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-02-11 12:02:12.535
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:167)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:152)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-02-11 12:02:12.826
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package thermo.build.test;

import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;

import org.openscience.cdk.exception.CDKException;
import org.openscience.cdk.interfaces.IAtomContainer;

import thermo.data.benson.SetOfBensonThermodynamicBase;
import thermo.data.benson.DB.ThermoSQLConnection;
import thermo.data.structure.linearform.NancyLinearFormToMolecule;
import thermo.data.structure.structure.SetOfMetaAtomsForSubstitution;
import thermo.data.structure.structure.StructureAsCML;
import thermo.data.structure.structure.DB.SQLMetaAtomDefinitionFromMetaAtomInfo;
import thermo.exception.ThermodynamicException;

public class CorrectionElementTests {
	static ThermoSQLConnection connection;
	static String type;
	static String specificTest = "";
	static String nancyS = "";
	static StringBuffer buf;
	static ArrayList<String> arguments;
	static boolean foundCommand;
	static IAtomContainer molecule;

	static String singleTest = "Single";
	static String fullTest = "Full";
	static String listelements = "List";
	static String elementS = "Element";
	static String opticalTestS = "OpticalSymmetryTest";
	static String bensonAtomTestS = "BensonAtomTest";

	/**
	 * @param args the command line arguments
	 */
	public static boolean executeCommand(String[] args) {
		if (setup(args)) {
			if (type.equalsIgnoreCase(opticalTestS)) {
				testOpticalSymmetry();
			} else if (type.equalsIgnoreCase(bensonAtomTestS)) {

			}
			System.out.println(buf.toString());
		}
		return foundCommand;
	}

	public static void commands() {
		System.out.println("Expecting the type of Tests:");
		System.out.println(opticalTestS + ":  Test an optical symmetry element(s)");
	}

	public static boolean setup(String[] args) {
		boolean success = true;
		if (args.length < 1) {
			foundCommand = false;
			success = false;
		} else {
			String type = args[0];
			if (type.equalsIgnoreCase(opticalTestS) || type.equalsIgnoreCase(bensonAtomTestS)) {
				if (args.length < 3) {
					opticalSymmetryCommands();
					success = false;
				} else {
					specificTest = args[1];
					nancyS = args[2];

					connection = new ThermoSQLConnection();
					connection.connect();

					IAtomContainer molecule = getMolecule();
					if (molecule != null) {
						buf = new StringBuffer();

						arguments = new ArrayList<String>();
						for (int i = 3; i < args.length; i++) {
							arguments.add(args[i]);
						}
					} else {
						success = false;
					}
				}
			} else {
				foundCommand = false;
				success = false;
			}
		}
		return success;
	}

	public static IAtomContainer getMolecule() {
		NancyLinearFormToMolecule nancyFormToMolecule;
		IAtomContainer molecule = null;
		try {
			nancyFormToMolecule = new NancyLinearFormToMolecule(connection);
			molecule = nancyFormToMolecule.convert(nancyS);

			buf.append("Molecule  -----------------------------------------------\n");
			StructureAsCML cmlstruct = new StructureAsCML(molecule);
			buf.append(cmlstruct.toString() + "\n");
			buf.append("Molecule  -----------------------------------------------\n");
		} catch (SQLException e) {
			System.out.println("Invalid Nancy Linear Form: " + nancyS);
		} catch (CDKException e) {
			System.out.println("Invalid Nancy Linear Form: " + nancyS);
		}
		return molecule;
	}

	private static void testOpticalSymmetry() {
		boolean success = true;
		SetOfBensonThermodynamicBase thermoset = new SetOfBensonThermodynamicBase();
		try {
			ThermoSQLConnection connection = new ThermoSQLConnection();
			connection.connect();

			if (specificTest.equalsIgnoreCase(singleTest)) {
				if(arguments.size() < 1) {
					System.out.println("Expecting optical symmetry name");
					opticalSymmetryCommands();
				} else {
					thermoset = TestOpticalSymmetryElement.performSingleTest(buf, molecule, connection, arguments.get(0));
				}
			} else if (specificTest.equalsIgnoreCase(fullTest)) {
				thermoset = TestOpticalSymmetryElement.performWithFullSet(buf, molecule, connection);
			}
		} catch (SQLException e) {
			buf.append(e.toString());
			success = false;
		} catch (CDKException e) {
			buf.append(e.toString());
			success = false;
		} catch (ThermodynamicException e) {
			buf.append(e.toString());
			success = false;
		}
		if (success) {
			if (thermoset.size() > 0) {
				buf.append("======================================================\n");
				buf.append(thermoset.toString());
				buf.append("======================================================\n");
			} else {
				buf.append("No symmetry corrections computed\n");
			}
		}
	}
	
	private static void metaAtomTest() {
		boolean success = true;
		String bensonAtomType = "BensonAtom";
		SetOfMetaAtomsForSubstitution metaAtomSubstitutions;
		SQLMetaAtomDefinitionFromMetaAtomInfo sqlMetaAtom;
		sqlMetaAtom = new SQLMetaAtomDefinitionFromMetaAtomInfo(connect);
			metaAtomSubstitutions = sqlMetaAtom.createSubstitutionSets(bensonAtomType);
		
		if(specificTest.equalsIgnoreCase(singleTest)) {
	        IAtomContainer substituted = metaAtomSubstitutions.substitute(molecule);
	        buf.append("computeThermodynamicsForMolecule  after meta-atom substitutions\n");
	        StructureAsCML cmlstruct = new StructureAsCML(substituted);
	        buf.append(cmlstruct.toString());
			} catch (ClassNotFoundException | SQLException | CDKException | IOException e) {
				buf.append(e.toString());
			}
	}

	private static void opticalSymmetryCommands() {
		System.out.println(opticalTestS + " SymmetryElement NancyString");
		System.out.println("Test type: " + singleTest + " or " + fullTest);
		System.out.println("NancyString: the molecule name as nancy string");
		System.out.println("Single test:");
		System.out.println("     SymmetryElement: The name of the optical symmetry element");

	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:167)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:152)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-02-11 12:02:12.826
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:167)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:152)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-02-11 12:02:12.828
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:167)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:152)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-02-11 12:02:13.961
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package thermo.build.test;

import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;

import org.openscience.cdk.exception.CDKException;
import org.openscience.cdk.interfaces.IAtomContainer;

import thermo.data.benson.SetOfBensonThermodynamicBase;
import thermo.data.benson.DB.ThermoSQLConnection;
import thermo.data.structure.linearform.NancyLinearFormToMolecule;
import thermo.data.structure.structure.SetOfMetaAtomsForSubstitution;
import thermo.data.structure.structure.StructureAsCML;
import thermo.data.structure.structure.DB.SQLMetaAtomDefinitionFromMetaAtomInfo;
import thermo.exception.ThermodynamicException;

public class CorrectionElementTests {
	static ThermoSQLConnection connection;
	static String type;
	static String specificTest = "";
	static String nancyS = "";
	static StringBuffer buf;
	static ArrayList<String> arguments;
	static boolean foundCommand;
	static IAtomContainer molecule;

	static String singleTest = "Single";
	static String fullTest = "Full";
	static String listelements = "List";
	static String elementS = "Element";
	static String opticalTestS = "OpticalSymmetryTest";
	static String bensonAtomTestS = "BensonAtomTest";

	/**
	 * @param args the command line arguments
	 */
	public static boolean executeCommand(String[] args) {
		if (setup(args)) {
			if (type.equalsIgnoreCase(opticalTestS)) {
				testOpticalSymmetry();
			} else if (type.equalsIgnoreCase(bensonAtomTestS)) {

			}
			System.out.println(buf.toString());
		}
		return foundCommand;
	}

	public static void commands() {
		System.out.println("Expecting the type of Tests:");
		System.out.println(opticalTestS + ":  Test an optical symmetry element(s)");
	}

	public static boolean setup(String[] args) {
		boolean success = true;
		if (args.length < 1) {
			foundCommand = false;
			success = false;
		} else {
			String type = args[0];
			if (type.equalsIgnoreCase(opticalTestS) || type.equalsIgnoreCase(bensonAtomTestS)) {
				if (args.length < 3) {
					opticalSymmetryCommands();
					success = false;
				} else {
					specificTest = args[1];
					nancyS = args[2];

					connection = new ThermoSQLConnection();
					connection.connect();

					IAtomContainer molecule = getMolecule();
					if (molecule != null) {
						buf = new StringBuffer();

						arguments = new ArrayList<String>();
						for (int i = 3; i < args.length; i++) {
							arguments.add(args[i]);
						}
					} else {
						success = false;
					}
				}
			} else {
				foundCommand = false;
				success = false;
			}
		}
		return success;
	}

	public static IAtomContainer getMolecule() {
		NancyLinearFormToMolecule nancyFormToMolecule;
		IAtomContainer molecule = null;
		try {
			nancyFormToMolecule = new NancyLinearFormToMolecule(connection);
			molecule = nancyFormToMolecule.convert(nancyS);

			buf.append("Molecule  -----------------------------------------------\n");
			StructureAsCML cmlstruct = new StructureAsCML(molecule);
			buf.append(cmlstruct.toString() + "\n");
			buf.append("Molecule  -----------------------------------------------\n");
		} catch (SQLException e) {
			System.out.println("Invalid Nancy Linear Form: " + nancyS);
		} catch (CDKException e) {
			System.out.println("Invalid Nancy Linear Form: " + nancyS);
		}
		return molecule;
	}

	private static void testOpticalSymmetry() {
		boolean success = true;
		SetOfBensonThermodynamicBase thermoset = new SetOfBensonThermodynamicBase();
		try {
			ThermoSQLConnection connection = new ThermoSQLConnection();
			connection.connect();

			if (specificTest.equalsIgnoreCase(singleTest)) {
				if(arguments.size() < 1) {
					System.out.println("Expecting optical symmetry name");
					opticalSymmetryCommands();
				} else {
					thermoset = TestOpticalSymmetryElement.performSingleTest(buf, molecule, connection, arguments.get(0));
				}
			} else if (specificTest.equalsIgnoreCase(fullTest)) {
				thermoset = TestOpticalSymmetryElement.performWithFullSet(buf, molecule, connection);
			}
		} catch (SQLException e) {
			buf.append(e.toString());
			success = false;
		} catch (CDKException e) {
			buf.append(e.toString());
			success = false;
		} catch (ThermodynamicException e) {
			buf.append(e.toString());
			success = false;
		}
		if (success) {
			if (thermoset.size() > 0) {
				buf.append("======================================================\n");
				buf.append(thermoset.toString());
				buf.append("======================================================\n");
			} else {
				buf.append("No symmetry corrections computed\n");
			}
		}
	}
	
	private static void metaAtomTest() {
		boolean success = true;
		String bensonAtomType = "BensonAtom";
		SetOfMetaAtomsForSubstitution metaAtomSubstitutions;
		SQLMetaAtomDefinitionFromMetaAtomInfo sqlMetaAtom;
		sqlMetaAtom = new SQLMetaAtomDefinitionFromMetaAtomInfo(connect);
			metaAtomSubstitutions = sqlMetaAtom.createSubstitutionSets(bensonAtomType);
		
		if(specificTest.equalsIgnoreCase(singleTest)) {
	        IAtomContainer substituted = metaAtomSubstitutions.substitute(molecule);
	        buf.append("computeThermodynamicsForMolecule  after meta-atom substitutions\n");
	        StructureAsCML cmlstruct = new StructureAsCML(substituted);
	        buf.append(cmlstruct.toString());
			} catch (ClassNotFoundException | SQLException | CDKException | IOException e) {
				buf.append(e.toString());
			}
	}

	private static void opticalSymmetryCommands() {
		System.out.println(opticalTestS + " SymmetryElement NancyString");
		System.out.println("Test type: " + singleTest + " or " + fullTest);
		System.out.println("NancyString: the molecule name as nancy string");
		System.out.println("Single test:");
		System.out.println("     SymmetryElement: The name of the optical symmetry element");

	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-02-11 12:02:13.961
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-02-11 12:02:13.963
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2021-02-11 12:02:15.048
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package thermo.build.test;

import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;

import org.openscience.cdk.exception.CDKException;
import org.openscience.cdk.interfaces.IAtomContainer;

import thermo.data.benson.SetOfBensonThermodynamicBase;
import thermo.data.benson.DB.ThermoSQLConnection;
import thermo.data.structure.linearform.NancyLinearFormToMolecule;
import thermo.data.structure.structure.SetOfMetaAtomsForSubstitution;
import thermo.data.structure.structure.StructureAsCML;
import thermo.data.structure.structure.DB.SQLMetaAtomDefinitionFromMetaAtomInfo;
import thermo.exception.ThermodynamicException;

public class CorrectionElementTests {
	static ThermoSQLConnection connection;
	static String type;
	static String specificTest = "";
	static String nancyS = "";
	static StringBuffer buf;
	static ArrayList<String> arguments;
	static boolean foundCommand;
	static IAtomContainer molecule;

	static String singleTest = "Single";
	static String fullTest = "Full";
	static String listelements = "List";
	static String elementS = "Element";
	static String opticalTestS = "OpticalSymmetryTest";
	static String bensonAtomTestS = "BensonAtomTest";

	/**
	 * @param args the command line arguments
	 */
	public static boolean executeCommand(String[] args) {
		if (setup(args)) {
			if (type.equalsIgnoreCase(opticalTestS)) {
				testOpticalSymmetry();
			} else if (type.equalsIgnoreCase(bensonAtomTestS)) {

			}
			System.out.println(buf.toString());
		}
		return foundCommand;
	}

	public static void commands() {
		System.out.println("Expecting the type of Tests:");
		System.out.println(opticalTestS + ":  Test an optical symmetry element(s)");
	}

	public static boolean setup(String[] args) {
		boolean success = true;
		if (args.length < 1) {
			foundCommand = false;
			success = false;
		} else {
			String type = args[0];
			if (type.equalsIgnoreCase(opticalTestS) || type.equalsIgnoreCase(bensonAtomTestS)) {
				if (args.length < 3) {
					opticalSymmetryCommands();
					success = false;
				} else {
					specificTest = args[1];
					nancyS = args[2];

					connection = new ThermoSQLConnection();
					connection.connect();

					IAtomContainer molecule = getMolecule();
					if (molecule != null) {
						buf = new StringBuffer();

						arguments = new ArrayList<String>();
						for (int i = 3; i < args.length; i++) {
							arguments.add(args[i]);
						}
					} else {
						success = false;
					}
				}
			} else {
				foundCommand = false;
				success = false;
			}
		}
		return success;
	}

	public static IAtomContainer getMolecule() {
		NancyLinearFormToMolecule nancyFormToMolecule;
		IAtomContainer molecule = null;
		try {
			nancyFormToMolecule = new NancyLinearFormToMolecule(connection);
			molecule = nancyFormToMolecule.convert(nancyS);

			buf.append("Molecule  -----------------------------------------------\n");
			StructureAsCML cmlstruct = new StructureAsCML(molecule);
			buf.append(cmlstruct.toString() + "\n");
			buf.append("Molecule  -----------------------------------------------\n");
		} catch (SQLException e) {
			System.out.println("Invalid Nancy Linear Form: " + nancyS);
		} catch (CDKException e) {
			System.out.println("Invalid Nancy Linear Form: " + nancyS);
		}
		return molecule;
	}

	private static void testOpticalSymmetry() {
		boolean success = true;
		SetOfBensonThermodynamicBase thermoset = new SetOfBensonThermodynamicBase();
		try {
			ThermoSQLConnection connection = new ThermoSQLConnection();
			connection.connect();

			if (specificTest.equalsIgnoreCase(singleTest)) {
				if(arguments.size() < 1) {
					System.out.println("Expecting optical symmetry name");
					opticalSymmetryCommands();
				} else {
					thermoset = TestOpticalSymmetryElement.performSingleTest(buf, molecule, connection, arguments.get(0));
				}
			} else if (specificTest.equalsIgnoreCase(fullTest)) {
				thermoset = TestOpticalSymmetryElement.performWithFullSet(buf, molecule, connection);
			}
		} catch (SQLException e) {
			buf.append(e.toString());
			success = false;
		} catch (CDKException e) {
			buf.append(e.toString());
			success = false;
		} catch (ThermodynamicException e) {
			buf.append(e.toString());
			success = false;
		}
		if (success) {
			if (thermoset.size() > 0) {
				buf.append("======================================================\n");
				buf.append(thermoset.toString());
				buf.append("======================================================\n");
			} else {
				buf.append("No symmetry corrections computed\n");
			}
		}
	}
	
	private static void metaAtomTest() {
		boolean success = true;
		String bensonAtomType = "BensonAtom";
		SetOfMetaAtomsForSubstitution metaAtomSubstitutions;
		SQLMetaAtomDefinitionFromMetaAtomInfo sqlMetaAtom;
		sqlMetaAtom = new SQLMetaAtomDefinitionFromMetaAtomInfo(connect);
			metaAtomSubstitutions = sqlMetaAtom.createSubstitutionSets(bensonAtomType);
		
		if(specificTest.equalsIgnoreCase(singleTest)) {
	        IAtomContainer substituted = metaAtomSubstitutions.substitute(molecule);
	        buf.append("computeThermodynamicsForMolecule  after meta-atom substitutions\n");
	        StructureAsCML cmlstruct = new StructureAsCML(substituted);
	        buf.append(cmlstruct.toString());
			} catch (ClassNotFoundException | SQLException | CDKException | IOException e) {
				buf.append(e.toString());
			}
	}

	private static void opticalSymmetryCommands() {
		System.out.println(opticalTestS + " SymmetryElement NancyString");
		System.out.println("Test type: " + singleTest + " or " + fullTest);
		System.out.println("NancyString: the molecule name as nancy string");
		System.out.println("Single test:");
		System.out.println("     SymmetryElement: The name of the optical symmetry element");

	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:449)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2021-02-11 12:02:15.048
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:449)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2021-02-11 12:02:15.050
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:449)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2021-02-11 12:02:15.058
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package thermo.build.test;

import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;

import org.openscience.cdk.exception.CDKException;
import org.openscience.cdk.interfaces.IAtomContainer;

import thermo.data.benson.SetOfBensonThermodynamicBase;
import thermo.data.benson.DB.ThermoSQLConnection;
import thermo.data.structure.linearform.NancyLinearFormToMolecule;
import thermo.data.structure.structure.SetOfMetaAtomsForSubstitution;
import thermo.data.structure.structure.StructureAsCML;
import thermo.data.structure.structure.DB.SQLMetaAtomDefinitionFromMetaAtomInfo;
import thermo.exception.ThermodynamicException;

public class CorrectionElementTests {
	static ThermoSQLConnection connection;
	static String type;
	static String specificTest = "";
	static String nancyS = "";
	static StringBuffer buf;
	static ArrayList<String> arguments;
	static boolean foundCommand;
	static IAtomContainer molecule;

	static String singleTest = "Single";
	static String fullTest = "Full";
	static String listelements = "List";
	static String elementS = "Element";
	static String opticalTestS = "OpticalSymmetryTest";
	static String bensonAtomTestS = "BensonAtomTest";

	/**
	 * @param args the command line arguments
	 */
	public static boolean executeCommand(String[] args) {
		if (setup(args)) {
			if (type.equalsIgnoreCase(opticalTestS)) {
				testOpticalSymmetry();
			} else if (type.equalsIgnoreCase(bensonAtomTestS)) {

			}
			System.out.println(buf.toString());
		}
		return foundCommand;
	}

	public static void commands() {
		System.out.println("Expecting the type of Tests:");
		System.out.println(opticalTestS + ":  Test an optical symmetry element(s)");
	}

	public static boolean setup(String[] args) {
		boolean success = true;
		if (args.length < 1) {
			foundCommand = false;
			success = false;
		} else {
			String type = args[0];
			if (type.equalsIgnoreCase(opticalTestS) || type.equalsIgnoreCase(bensonAtomTestS)) {
				if (args.length < 3) {
					opticalSymmetryCommands();
					success = false;
				} else {
					specificTest = args[1];
					nancyS = args[2];

					connection = new ThermoSQLConnection();
					connection.connect();

					IAtomContainer molecule = getMolecule();
					if (molecule != null) {
						buf = new StringBuffer();

						arguments = new ArrayList<String>();
						for (int i = 3; i < args.length; i++) {
							arguments.add(args[i]);
						}
					} else {
						success = false;
					}
				}
			} else {
				foundCommand = false;
				success = false;
			}
		}
		return success;
	}

	public static IAtomContainer getMolecule() {
		NancyLinearFormToMolecule nancyFormToMolecule;
		IAtomContainer molecule = null;
		try {
			nancyFormToMolecule = new NancyLinearFormToMolecule(connection);
			molecule = nancyFormToMolecule.convert(nancyS);

			buf.append("Molecule  -----------------------------------------------\n");
			StructureAsCML cmlstruct = new StructureAsCML(molecule);
			buf.append(cmlstruct.toString() + "\n");
			buf.append("Molecule  -----------------------------------------------\n");
		} catch (SQLException e) {
			System.out.println("Invalid Nancy Linear Form: " + nancyS);
		} catch (CDKException e) {
			System.out.println("Invalid Nancy Linear Form: " + nancyS);
		}
		return molecule;
	}

	private static void testOpticalSymmetry() {
		boolean success = true;
		SetOfBensonThermodynamicBase thermoset = new SetOfBensonThermodynamicBase();
		try {
			ThermoSQLConnection connection = new ThermoSQLConnection();
			connection.connect();

			if (specificTest.equalsIgnoreCase(singleTest)) {
				if(arguments.size() < 1) {
					System.out.println("Expecting optical symmetry name");
					opticalSymmetryCommands();
				} else {
					thermoset = TestOpticalSymmetryElement.performSingleTest(buf, molecule, connection, arguments.get(0));
				}
			} else if (specificTest.equalsIgnoreCase(fullTest)) {
				thermoset = TestOpticalSymmetryElement.performWithFullSet(buf, molecule, connection);
			}
		} catch (SQLException e) {
			buf.append(e.toString());
			success = false;
		} catch (CDKException e) {
			buf.append(e.toString());
			success = false;
		} catch (ThermodynamicException e) {
			buf.append(e.toString());
			success = false;
		}
		if (success) {
			if (thermoset.size() > 0) {
				buf.append("======================================================\n");
				buf.append(thermoset.toString());
				buf.append("======================================================\n");
			} else {
				buf.append("No symmetry corrections computed\n");
			}
		}
	}
	
	private static void metaAtomTest() {
		boolean success = true;
		String bensonAtomType = "BensonAtom";
		SetOfMetaAtomsForSubstitution metaAtomSubstitutions;
		SQLMetaAtomDefinitionFromMetaAtomInfo sqlMetaAtom;
		sqlMetaAtom = new SQLMetaAtomDefinitionFromMetaAtomInfo(connect);
			metaAtomSubstitutions = sqlMetaAtom.createSubstitutionSets(bensonAtomType);
		
		if(specificTest.equalsIgnoreCase(singleTest)) {
	        IAtomContainer substituted = metaAtomSubstitutions.substitute(molecule);
	        buf.append("computeThermodynamicsForMolecule  after meta-atom substitutions\n");
	        StructureAsCML cmlstruct = new StructureAsCML(substituted);
	        buf.append(cmlstruct.toString());
			} catch (ClassNotFoundException | SQLException | CDKException | IOException e) {
				buf.append(e.toString());
			}
	}

	private static void opticalSymmetryCommands() {
		System.out.println(opticalTestS + " SymmetryElement NancyString");
		System.out.println("Test type: " + singleTest + " or " + fullTest);
		System.out.println("NancyString: the molecule name as nancy string");
		System.out.println("Single test:");
		System.out.println("     SymmetryElement: The name of the optical symmetry element");

	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:167)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:152)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-02-11 12:02:15.058
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:167)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:152)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-02-11 12:02:15.059
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:167)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:152)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-02-11 12:02:19.073
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package thermo.build.test;

import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;

import org.openscience.cdk.exception.CDKException;
import org.openscience.cdk.interfaces.IAtomContainer;

import thermo.data.benson.SetOfBensonThermodynamicBase;
import thermo.data.benson.DB.ThermoSQLConnection;
import thermo.data.structure.linearform.NancyLinearFormToMolecule;
import thermo.data.structure.structure.SetOfMetaAtomsForSubstitution;
import thermo.data.structure.structure.StructureAsCML;
import thermo.data.structure.structure.DB.SQLMetaAtomDefinitionFromMetaAtomInfo;
import thermo.exception.ThermodynamicException;

public class CorrectionElementTests {
	static ThermoSQLConnection connection;
	static String type;
	static String specificTest = "";
	static String nancyS = "";
	static StringBuffer buf;
	static ArrayList<String> arguments;
	static boolean foundCommand;
	static IAtomContainer molecule;

	static String singleTest = "Single";
	static String fullTest = "Full";
	static String listelements = "List";
	static String elementS = "Element";
	static String opticalTestS = "OpticalSymmetryTest";
	static String bensonAtomTestS = "BensonAtomTest";

	/**
	 * @param args the command line arguments
	 */
	public static boolean executeCommand(String[] args) {
		if (setup(args)) {
			if (type.equalsIgnoreCase(opticalTestS)) {
				testOpticalSymmetry();
			} else if (type.equalsIgnoreCase(bensonAtomTestS)) {

			}
			System.out.println(buf.toString());
		}
		return foundCommand;
	}

	public static void commands() {
		System.out.println("Expecting the type of Tests:");
		System.out.println(opticalTestS + ":  Test an optical symmetry element(s)");
	}

	public static boolean setup(String[] args) {
		boolean success = true;
		if (args.length < 1) {
			foundCommand = false;
			success = false;
		} else {
			String type = args[0];
			if (type.equalsIgnoreCase(opticalTestS) || type.equalsIgnoreCase(bensonAtomTestS)) {
				if (args.length < 3) {
					opticalSymmetryCommands();
					success = false;
				} else {
					specificTest = args[1];
					nancyS = args[2];

					connection = new ThermoSQLConnection();
					connection.connect();

					IAtomContainer molecule = getMolecule();
					if (molecule != null) {
						buf = new StringBuffer();

						arguments = new ArrayList<String>();
						for (int i = 3; i < args.length; i++) {
							arguments.add(args[i]);
						}
					} else {
						success = false;
					}
				}
			} else {
				foundCommand = false;
				success = false;
			}
		}
		return success;
	}

	public static IAtomContainer getMolecule() {
		NancyLinearFormToMolecule nancyFormToMolecule;
		IAtomContainer molecule = null;
		try {
			nancyFormToMolecule = new NancyLinearFormToMolecule(connection);
			molecule = nancyFormToMolecule.convert(nancyS);

			buf.append("Molecule  -----------------------------------------------\n");
			StructureAsCML cmlstruct = new StructureAsCML(molecule);
			buf.append(cmlstruct.toString() + "\n");
			buf.append("Molecule  -----------------------------------------------\n");
		} catch (SQLException e) {
			System.out.println("Invalid Nancy Linear Form: " + nancyS);
		} catch (CDKException e) {
			System.out.println("Invalid Nancy Linear Form: " + nancyS);
		}
		return molecule;
	}

	private static void testOpticalSymmetry() {
		boolean success = true;
		SetOfBensonThermodynamicBase thermoset = new SetOfBensonThermodynamicBase();
		try {
			ThermoSQLConnection connection = new ThermoSQLConnection();
			connection.connect();

			if (specificTest.equalsIgnoreCase(singleTest)) {
				if (arguments.size() < 1) {
					System.out.println("Expecting optical symmetry name");
					opticalSymmetryCommands();
				} else {
					thermoset = TestOpticalSymmetryElement.performSingleTest(buf, molecule, connection,
							arguments.get(0));
				}
			} else if (specificTest.equalsIgnoreCase(fullTest)) {
				thermoset = TestOpticalSymmetryElement.performWithFullSet(buf, molecule, connection);
			}
		} catch (SQLException e) {
			buf.append(e.toString());
			success = false;
		} catch (CDKException e) {
			buf.append(e.toString());
			success = false;
		} catch (ThermodynamicException e) {
			buf.append(e.toString());
			success = false;
		}
		if (success) {
			if (thermoset.size() > 0) {
				buf.append("======================================================\n");
				buf.append(thermoset.toString());
				buf.append("======================================================\n");
			} else {
				buf.append("No symmetry corrections computed\n");
			}
		}
	}

	private static void metaAtomTest() {
		boolean success = true;
		String bensonAtomType = "BensonAtom";
		SetOfMetaAtomsForSubstitution metaAtomSubstitutions;
		SQLMetaAtomDefinitionFromMetaAtomInfo sqlMetaAtom;
		sqlMetaAtom = new SQLMetaAtomDefinitionFromMetaAtomInfo(connect);
			metaAtomSubstitutions = sqlMetaAtom.createSubstitutionSets(bensonAtomType);
		
		if(specificTest.equalsIgnoreCase(singleTest)) {
	        IAtomContainer substituted = metaAtomSubstitutions.substitute(molecule);
	        buf.append("computeThermodynamicsForMolecule  after meta-atom substitutions\n");
	        StructureAsCML cmlstruct = new StructureAsCML(substituted);
	        buf.append(cmlstruct.toString());
			} catch (ClassNotFoundException | SQLException | CDKException | IOException e) {
				buf.append(e.toString());
			}
	}

	private static void opticalSymmetryCommands() {
		System.out.println(opticalTestS + " SymmetryElement NancyString");
		System.out.println("Test type: " + singleTest + " or " + fullTest);
		System.out.println("NancyString: the molecule name as nancy string");
		System.out.println("Single test:");
		System.out.println("     SymmetryElement: The name of the optical symmetry element");

	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:449)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:268)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2021-02-11 12:02:19.074
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:449)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:268)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2021-02-11 12:02:19.076
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:449)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:268)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2021-02-11 12:02:19.198
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package thermo.build.test;

import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;

import org.openscience.cdk.exception.CDKException;
import org.openscience.cdk.interfaces.IAtomContainer;

import thermo.data.benson.SetOfBensonThermodynamicBase;
import thermo.data.benson.DB.ThermoSQLConnection;
import thermo.data.structure.linearform.NancyLinearFormToMolecule;
import thermo.data.structure.structure.SetOfMetaAtomsForSubstitution;
import thermo.data.structure.structure.StructureAsCML;
import thermo.data.structure.structure.DB.SQLMetaAtomDefinitionFromMetaAtomInfo;
import thermo.exception.ThermodynamicException;

public class CorrectionElementTests {
	static ThermoSQLConnection connection;
	static String type;
	static String specificTest = "";
	static String nancyS = "";
	static StringBuffer buf;
	static ArrayList<String> arguments;
	static boolean foundCommand;
	static IAtomContainer molecule;

	static String singleTest = "Single";
	static String fullTest = "Full";
	static String listelements = "List";
	static String elementS = "Element";
	static String opticalTestS = "OpticalSymmetryTest";
	static String bensonAtomTestS = "BensonAtomTest";

	/**
	 * @param args the command line arguments
	 */
	public static boolean executeCommand(String[] args) {
		if (setup(args)) {
			if (type.equalsIgnoreCase(opticalTestS)) {
				testOpticalSymmetry();
			} else if (type.equalsIgnoreCase(bensonAtomTestS)) {

			}
			System.out.println(buf.toString());
		}
		return foundCommand;
	}

	public static void commands() {
		System.out.println("Expecting the type of Tests:");
		System.out.println(opticalTestS + ":  Test an optical symmetry element(s)");
	}

	public static boolean setup(String[] args) {
		boolean success = true;
		if (args.length < 1) {
			foundCommand = false;
			success = false;
		} else {
			String type = args[0];
			if (type.equalsIgnoreCase(opticalTestS) || type.equalsIgnoreCase(bensonAtomTestS)) {
				if (args.length < 3) {
					opticalSymmetryCommands();
					success = false;
				} else {
					specificTest = args[1];
					nancyS = args[2];

					connection = new ThermoSQLConnection();
					connection.connect();

					IAtomContainer molecule = getMolecule();
					if (molecule != null) {
						buf = new StringBuffer();

						arguments = new ArrayList<String>();
						for (int i = 3; i < args.length; i++) {
							arguments.add(args[i]);
						}
					} else {
						success = false;
					}
				}
			} else {
				foundCommand = false;
				success = false;
			}
		}
		return success;
	}

	public static IAtomContainer getMolecule() {
		NancyLinearFormToMolecule nancyFormToMolecule;
		IAtomContainer molecule = null;
		try {
			nancyFormToMolecule = new NancyLinearFormToMolecule(connection);
			molecule = nancyFormToMolecule.convert(nancyS);

			buf.append("Molecule  -----------------------------------------------\n");
			StructureAsCML cmlstruct = new StructureAsCML(molecule);
			buf.append(cmlstruct.toString() + "\n");
			buf.append("Molecule  -----------------------------------------------\n");
		} catch (SQLException e) {
			System.out.println("Invalid Nancy Linear Form: " + nancyS);
		} catch (CDKException e) {
			System.out.println("Invalid Nancy Linear Form: " + nancyS);
		}
		return molecule;
	}

	private static void testOpticalSymmetry() {
		boolean success = true;
		SetOfBensonThermodynamicBase thermoset = new SetOfBensonThermodynamicBase();
		try {
			ThermoSQLConnection connection = new ThermoSQLConnection();
			connection.connect();

			if (specificTest.equalsIgnoreCase(singleTest)) {
				if (arguments.size() < 1) {
					System.out.println("Expecting optical symmetry name");
					opticalSymmetryCommands();
				} else {
					thermoset = TestOpticalSymmetryElement.performSingleTest(buf, molecule, connection,
							arguments.get(0));
				}
			} else if (specificTest.equalsIgnoreCase(fullTest)) {
				thermoset = TestOpticalSymmetryElement.performWithFullSet(buf, molecule, connection);
			}
		} catch (SQLException e) {
			buf.append(e.toString());
			success = false;
		} catch (CDKException e) {
			buf.append(e.toString());
			success = false;
		} catch (ThermodynamicException e) {
			buf.append(e.toString());
			success = false;
		}
		if (success) {
			if (thermoset.size() > 0) {
				buf.append("======================================================\n");
				buf.append(thermoset.toString());
				buf.append("======================================================\n");
			} else {
				buf.append("No symmetry corrections computed\n");
			}
		}
	}

	private static void metaAtomTest() {
		boolean success = true;
		String bensonAtomType = "BensonAtom";
		SetOfMetaAtomsForSubstitution metaAtomSubstitutions;
		SQLMetaAtomDefinitionFromMetaAtomInfo sqlMetaAtom;
		sqlMetaAtom = new SQLMetaAtomDefinitionFromMetaAtomInfo(connect);
			metaAtomSubstitutions = sqlMetaAtom.createSubstitutionSets(bensonAtomType);
		
		if(specificTest.equalsIgnoreCase(singleTest)) {
	        IAtomContainer substituted = metaAtomSubstitutions.substitute(molecule);
	        buf.append("computeThermodynamicsForMolecule  after meta-atom substitutions\n");
	        StructureAsCML cmlstruct = new StructureAsCML(substituted);
	        buf.append(cmlstruct.toString());
			} catch (ClassNotFoundException | SQLException | CDKException | IOException e) {
				buf.append(e.toString());
			}
	}

	private static void opticalSymmetryCommands() {
		System.out.println(opticalTestS + " SymmetryElement NancyString");
		System.out.println("Test type: " + singleTest + " or " + fullTest);
		System.out.println("NancyString: the molecule name as nancy string");
		System.out.println("Single test:");
		System.out.println("     SymmetryElement: The name of the optical symmetry element");

	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:167)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:152)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-02-11 12:02:19.199
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:167)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:152)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-02-11 12:02:19.199
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:167)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:152)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-02-11 12:02:25.432
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package thermo.build.test;

import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;

import org.openscience.cdk.exception.CDKException;
import org.openscience.cdk.interfaces.IAtomContainer;

import thermo.data.benson.SetOfBensonThermodynamicBase;
import thermo.data.benson.DB.ThermoSQLConnection;
import thermo.data.structure.linearform.NancyLinearFormToMolecule;
import thermo.data.structure.structure.SetOfMetaAtomsForSubstitution;
import thermo.data.structure.structure.StructureAsCML;
import thermo.data.structure.structure.DB.SQLMetaAtomDefinitionFromMetaAtomInfo;
import thermo.exception.ThermodynamicException;

public class CorrectionElementTests {
	static ThermoSQLConnection connection;
	static String type;
	static String specificTest = "";
	static String nancyS = "";
	static StringBuffer buf;
	static ArrayList<String> arguments;
	static boolean foundCommand;
	static IAtomContainer molecule;

	static String singleTest = "Single";
	static String fullTest = "Full";
	static String listelements = "List";
	static String elementS = "Element";
	static String opticalTestS = "OpticalSymmetryTest";
	static String bensonAtomTestS = "BensonAtomTest";

	/**
	 * @param args the command line arguments
	 */
	public static boolean executeCommand(String[] args) {
		if (setup(args)) {
			if (type.equalsIgnoreCase(opticalTestS)) {
				testOpticalSymmetry();
			} else if (type.equalsIgnoreCase(bensonAtomTestS)) {

			}
			System.out.println(buf.toString());
		}
		return foundCommand;
	}

	public static void commands() {
		System.out.println("Expecting the type of Tests:");
		System.out.println(opticalTestS + ":  Test an optical symmetry element(s)");
	}

	public static boolean setup(String[] args) {
		boolean success = true;
		if (args.length < 1) {
			foundCommand = false;
			success = false;
		} else {
			String type = args[0];
			if (type.equalsIgnoreCase(opticalTestS) || type.equalsIgnoreCase(bensonAtomTestS)) {
				if (args.length < 3) {
					opticalSymmetryCommands();
					success = false;
				} else {
					specificTest = args[1];
					nancyS = args[2];

					connection = new ThermoSQLConnection();
					connection.connect();

					IAtomContainer molecule = getMolecule();
					if (molecule != null) {
						buf = new StringBuffer();

						arguments = new ArrayList<String>();
						for (int i = 3; i < args.length; i++) {
							arguments.add(args[i]);
						}
					} else {
						success = false;
					}
				}
			} else {
				foundCommand = false;
				success = false;
			}
		}
		return success;
	}

	public static IAtomContainer getMolecule() {
		NancyLinearFormToMolecule nancyFormToMolecule;
		IAtomContainer molecule = null;
		try {
			nancyFormToMolecule = new NancyLinearFormToMolecule(connection);
			molecule = nancyFormToMolecule.convert(nancyS);

			buf.append("Molecule  -----------------------------------------------\n");
			StructureAsCML cmlstruct = new StructureAsCML(molecule);
			buf.append(cmlstruct.toString() + "\n");
			buf.append("Molecule  -----------------------------------------------\n");
		} catch (SQLException e) {
			System.out.println("Invalid Nancy Linear Form: " + nancyS);
		} catch (CDKException e) {
			System.out.println("Invalid Nancy Linear Form: " + nancyS);
		}
		return molecule;
	}

	private static void testOpticalSymmetry() {
		boolean success = true;
		SetOfBensonThermodynamicBase thermoset = new SetOfBensonThermodynamicBase();
		try {
			ThermoSQLConnection connection = new ThermoSQLConnection();
			connection.connect();

			if (specificTest.equalsIgnoreCase(singleTest)) {
				if (arguments.size() < 1) {
					System.out.println("Expecting optical symmetry name");
					opticalSymmetryCommands();
				} else {
					thermoset = TestOpticalSymmetryElement.performSingleTest(buf, molecule, connection,
							arguments.get(0));
				}
			} else if (specificTest.equalsIgnoreCase(fullTest)) {
				thermoset = TestOpticalSymmetryElement.performWithFullSet(buf, molecule, connection);
			}
		} catch (SQLException e) {
			buf.append(e.toString());
			success = false;
		} catch (CDKException e) {
			buf.append(e.toString());
			success = false;
		} catch (ThermodynamicException e) {
			buf.append(e.toString());
			success = false;
		}
		if (success) {
			if (thermoset.size() > 0) {
				buf.append("======================================================\n");
				buf.append(thermoset.toString());
				buf.append("======================================================\n");
			} else {
				buf.append("No symmetry corrections computed\n");
			}
		}
	}

	private static void metaAtomTest() {
		boolean success = true;
		String bensonAtomType = "BensonAtom";
		SetOfMetaAtomsForSubstitution metaAtomSubstitutions;
		SQLMetaAtomDefinitionFromMetaAtomInfo sqlMetaAtom;
		sqlMetaAtom = new SQLMetaAtomDefinitionFromMetaAtomInfo(connect);
			metaAtomSubstitutions = sqlMetaAtom.createSubstitutionSets(bensonAtomType);
		
		if(specificTest.equalsIgnoreCase(singleTest)) {
	        IAtomContainer substituted = metaAtomSubstitutions.substitute(molecule);
	        buf.append("computeThermodynamicsForMolecule  after meta-atom substitutions\n");
	        StructureAsCML cmlstruct = new StructureAsCML(substituted);
	        buf.append(cmlstruct.toString());
			} catch (ClassNotFoundException | SQLException | CDKException | IOException e) {
				buf.append(e.toString());
			}
	}

	private static void opticalSymmetryCommands() {
		System.out.println(opticalTestS + " SymmetryElement NancyString");
		System.out.println("Test type: " + singleTest + " or " + fullTest);
		System.out.println("NancyString: the molecule name as nancy string");
		System.out.println("Single test:");
		System.out.println("     SymmetryElement: The name of the optical symmetry element");

	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:167)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:152)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-02-11 12:02:25.432
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:167)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:152)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-02-11 12:02:25.434
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:167)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:152)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-02-11 12:02:26.364
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package thermo.build.test;

import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;

import org.openscience.cdk.exception.CDKException;
import org.openscience.cdk.interfaces.IAtomContainer;

import thermo.data.benson.SetOfBensonThermodynamicBase;
import thermo.data.benson.DB.ThermoSQLConnection;
import thermo.data.structure.linearform.NancyLinearFormToMolecule;
import thermo.data.structure.structure.SetOfMetaAtomsForSubstitution;
import thermo.data.structure.structure.StructureAsCML;
import thermo.data.structure.structure.DB.SQLMetaAtomDefinitionFromMetaAtomInfo;
import thermo.exception.ThermodynamicException;

public class CorrectionElementTests {
	static ThermoSQLConnection connection;
	static String type;
	static String specificTest = "";
	static String nancyS = "";
	static StringBuffer buf;
	static ArrayList<String> arguments;
	static boolean foundCommand;
	static IAtomContainer molecule;

	static String singleTest = "Single";
	static String fullTest = "Full";
	static String listelements = "List";
	static String elementS = "Element";
	static String opticalTestS = "OpticalSymmetryTest";
	static String bensonAtomTestS = "BensonAtomTest";

	/**
	 * @param args the command line arguments
	 */
	public static boolean executeCommand(String[] args) {
		if (setup(args)) {
			if (type.equalsIgnoreCase(opticalTestS)) {
				testOpticalSymmetry();
			} else if (type.equalsIgnoreCase(bensonAtomTestS)) {

			}
			System.out.println(buf.toString());
		}
		return foundCommand;
	}

	public static void commands() {
		System.out.println("Expecting the type of Tests:");
		System.out.println(opticalTestS + ":  Test an optical symmetry element(s)");
	}

	public static boolean setup(String[] args) {
		boolean success = true;
		if (args.length < 1) {
			foundCommand = false;
			success = false;
		} else {
			String type = args[0];
			if (type.equalsIgnoreCase(opticalTestS) || type.equalsIgnoreCase(bensonAtomTestS)) {
				if (args.length < 3) {
					opticalSymmetryCommands();
					success = false;
				} else {
					specificTest = args[1];
					nancyS = args[2];

					connection = new ThermoSQLConnection();
					connection.connect();

					IAtomContainer molecule = getMolecule();
					if (molecule != null) {
						buf = new StringBuffer();

						arguments = new ArrayList<String>();
						for (int i = 3; i < args.length; i++) {
							arguments.add(args[i]);
						}
					} else {
						success = false;
					}
				}
			} else {
				foundCommand = false;
				success = false;
			}
		}
		return success;
	}

	public static IAtomContainer getMolecule() {
		NancyLinearFormToMolecule nancyFormToMolecule;
		IAtomContainer molecule = null;
		try {
			nancyFormToMolecule = new NancyLinearFormToMolecule(connection);
			molecule = nancyFormToMolecule.convert(nancyS);

			buf.append("Molecule  -----------------------------------------------\n");
			StructureAsCML cmlstruct = new StructureAsCML(molecule);
			buf.append(cmlstruct.toString() + "\n");
			buf.append("Molecule  -----------------------------------------------\n");
		} catch (SQLException e) {
			System.out.println("Invalid Nancy Linear Form: " + nancyS);
		} catch (CDKException e) {
			System.out.println("Invalid Nancy Linear Form: " + nancyS);
		}
		return molecule;
	}

	private static void testOpticalSymmetry() {
		boolean success = true;
		SetOfBensonThermodynamicBase thermoset = new SetOfBensonThermodynamicBase();
		try {
			ThermoSQLConnection connection = new ThermoSQLConnection();
			connection.connect();

			if (specificTest.equalsIgnoreCase(singleTest)) {
				if (arguments.size() < 1) {
					System.out.println("Expecting optical symmetry name");
					opticalSymmetryCommands();
				} else {
					thermoset = TestOpticalSymmetryElement.performSingleTest(buf, molecule, connection,
							arguments.get(0));
				}
			} else if (specificTest.equalsIgnoreCase(fullTest)) {
				thermoset = TestOpticalSymmetryElement.performWithFullSet(buf, molecule, connection);
			}
		} catch (SQLException e) {
			buf.append(e.toString());
			success = false;
		} catch (CDKException e) {
			buf.append(e.toString());
			success = false;
		} catch (ThermodynamicException e) {
			buf.append(e.toString());
			success = false;
		}
		if (success) {
			if (thermoset.size() > 0) {
				buf.append("======================================================\n");
				buf.append(thermoset.toString());
				buf.append("======================================================\n");
			} else {
				buf.append("No symmetry corrections computed\n");
			}
		}
	}

	private static void metaAtomTest() {
		boolean success = true;
		String bensonAtomType = "BensonAtom";
		SetOfMetaAtomsForSubstitution metaAtomSubstitutions;
		SQLMetaAtomDefinitionFromMetaAtomInfo sqlMetaAtom;
		sqlMetaAtom = new SQLMetaAtomDefinitionFromMetaAtomInfo(connect);
			metaAtomSubstitutions = sqlMetaAtom.createSubstitutionSets(bensonAtomType);
		
		if(specificTest.equalsIgnoreCase(singleTest)) {
	        IAtomContainer substituted = metaAtomSubstitutions.substitute(molecule);
	        buf.append("computeThermodynamicsForMolecule  after meta-atom substitutions\n");
	        StructureAsCML cmlstruct = new StructureAsCML(substituted);
	        buf.append(cmlstruct.toString());
			} catch (ClassNotFoundException | SQLException | CDKException | IOException e) {
				buf.append(e.toString());
			}
	}

	private static void opticalSymmetryCommands() {
		System.out.println(opticalTestS + " SymmetryElement NancyString");
		System.out.println("Test type: " + singleTest + " or " + fullTest);
		System.out.println("NancyString: the molecule name as nancy string");
		System.out.println("Single test:");
		System.out.println("     SymmetryElement: The name of the optical symmetry element");

	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:167)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:152)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-02-11 12:02:26.364
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:167)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:152)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-02-11 12:02:26.366
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:167)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:152)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-02-11 12:02:31.455
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package thermo.build.test;

import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;

import org.openscience.cdk.exception.CDKException;
import org.openscience.cdk.interfaces.IAtomContainer;

import thermo.data.benson.SetOfBensonThermodynamicBase;
import thermo.data.benson.DB.ThermoSQLConnection;
import thermo.data.structure.linearform.NancyLinearFormToMolecule;
import thermo.data.structure.structure.SetOfMetaAtomsForSubstitution;
import thermo.data.structure.structure.StructureAsCML;
import thermo.data.structure.structure.DB.SQLMetaAtomDefinitionFromMetaAtomInfo;
import thermo.exception.ThermodynamicException;

public class CorrectionElementTests {
	static ThermoSQLConnection connection;
	static String type;
	static String specificTest = "";
	static String nancyS = "";
	static StringBuffer buf;
	static ArrayList<String> arguments;
	static boolean foundCommand;
	static IAtomContainer molecule;

	static String singleTest = "Single";
	static String fullTest = "Full";
	static String listelements = "List";
	static String elementS = "Element";
	static String opticalTestS = "OpticalSymmetryTest";
	static String bensonAtomTestS = "BensonAtomTest";

	/**
	 * @param args the command line arguments
	 */
	public static boolean executeCommand(String[] args) {
		if (setup(args)) {
			if (type.equalsIgnoreCase(opticalTestS)) {
				testOpticalSymmetry();
			} else if (type.equalsIgnoreCase(bensonAtomTestS)) {

			}
			System.out.println(buf.toString());
		}
		return foundCommand;
	}

	public static void commands() {
		System.out.println("Expecting the type of Tests:");
		System.out.println(opticalTestS + ":  Test an optical symmetry element(s)");
	}

	public static boolean setup(String[] args) {
		boolean success = true;
		if (args.length < 1) {
			foundCommand = false;
			success = false;
		} else {
			String type = args[0];
			if (type.equalsIgnoreCase(opticalTestS) || type.equalsIgnoreCase(bensonAtomTestS)) {
				if (args.length < 3) {
					opticalSymmetryCommands();
					success = false;
				} else {
					specificTest = args[1];
					nancyS = args[2];

					connection = new ThermoSQLConnection();
					connection.connect();

					IAtomContainer molecule = getMolecule();
					if (molecule != null) {
						buf = new StringBuffer();

						arguments = new ArrayList<String>();
						for (int i = 3; i < args.length; i++) {
							arguments.add(args[i]);
						}
					} else {
						success = false;
					}
				}
			} else {
				foundCommand = false;
				success = false;
			}
		}
		return success;
	}

	public static IAtomContainer getMolecule() {
		NancyLinearFormToMolecule nancyFormToMolecule;
		IAtomContainer molecule = null;
		try {
			nancyFormToMolecule = new NancyLinearFormToMolecule(connection);
			molecule = nancyFormToMolecule.convert(nancyS);

			buf.append("Molecule  -----------------------------------------------\n");
			StructureAsCML cmlstruct = new StructureAsCML(molecule);
			buf.append(cmlstruct.toString() + "\n");
			buf.append("Molecule  -----------------------------------------------\n");
		} catch (SQLException e) {
			System.out.println("Invalid Nancy Linear Form: " + nancyS);
		} catch (CDKException e) {
			System.out.println("Invalid Nancy Linear Form: " + nancyS);
		}
		return molecule;
	}

	private static void testOpticalSymmetry() {
		boolean success = true;
		SetOfBensonThermodynamicBase thermoset = new SetOfBensonThermodynamicBase();
		try {
			ThermoSQLConnection connection = new ThermoSQLConnection();
			connection.connect();

			if (specificTest.equalsIgnoreCase(singleTest)) {
				if (arguments.size() < 1) {
					System.out.println("Expecting optical symmetry name");
					opticalSymmetryCommands();
				} else {
					thermoset = TestOpticalSymmetryElement.performSingleTest(buf, molecule, connection,
							arguments.get(0));
				}
			} else if (specificTest.equalsIgnoreCase(fullTest)) {
				thermoset = TestOpticalSymmetryElement.performWithFullSet(buf, molecule, connection);
			}
		} catch (SQLException e) {
			buf.append(e.toString());
			success = false;
		} catch (CDKException e) {
			buf.append(e.toString());
			success = false;
		} catch (ThermodynamicException e) {
			buf.append(e.toString());
			success = false;
		}
		if (success) {
			if (thermoset.size() > 0) {
				buf.append("======================================================\n");
				buf.append(thermoset.toString());
				buf.append("======================================================\n");
			} else {
				buf.append("No symmetry corrections computed\n");
			}
		}
	}

	private static void metaAtomTest() {
		boolean success = true;
		String bensonAtomType = "BensonAtom";
		SetOfMetaAtomsForSubstitution metaAtomSubstitutions;
		SQLMetaAtomDefinitionFromMetaAtomInfo sqlMetaAtom;
		sqlMetaAtom = new SQLMetaAtomDefinitionFromMetaAtomInfo(connect);
			metaAtomSubstitutions = sqlMetaAtom.createSubstitutionSets(bensonAtomType);
		
		if(specificTest.equalsIgnoreCase(singleTest)) {
	        IAtomContainer substituted = metaAtomSubstitutions.substitute(molecule);
	        buf.append("computeThermodynamicsForMolecule  after meta-atom substitutions\n");
	        StructureAsCML cmlstruct = new StructureAsCML(substituted);
	        buf.append(cmlstruct.toString());
			} catch (ClassNotFoundException | SQLException | CDKException | IOException e) {
				buf.append(e.toString());
			}
	}

	private static void opticalSymmetryCommands() {
		System.out.println(opticalTestS + " SymmetryElement NancyString");
		System.out.println("Test type: " + singleTest + " or " + fullTest);
		System.out.println("NancyString: the molecule name as nancy string");
		System.out.println("Single test:");
		System.out.println("     SymmetryElement: The name of the optical symmetry element");

	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:167)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:152)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-02-11 12:02:31.456
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:167)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:152)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-02-11 12:02:31.457
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:167)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:152)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-02-11 12:02:33.713
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package thermo.build.test;

import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;

import org.openscience.cdk.exception.CDKException;
import org.openscience.cdk.interfaces.IAtomContainer;

import thermo.data.benson.SetOfBensonThermodynamicBase;
import thermo.data.benson.DB.ThermoSQLConnection;
import thermo.data.structure.linearform.NancyLinearFormToMolecule;
import thermo.data.structure.structure.SetOfMetaAtomsForSubstitution;
import thermo.data.structure.structure.StructureAsCML;
import thermo.data.structure.structure.DB.SQLMetaAtomDefinitionFromMetaAtomInfo;
import thermo.exception.ThermodynamicException;

public class CorrectionElementTests {
	static ThermoSQLConnection connection;
	static String type;
	static String specificTest = "";
	static String nancyS = "";
	static StringBuffer buf;
	static ArrayList<String> arguments;
	static boolean foundCommand;
	static IAtomContainer molecule;

	static String singleTest = "Single";
	static String fullTest = "Full";
	static String listelements = "List";
	static String elementS = "Element";
	static String opticalTestS = "OpticalSymmetryTest";
	static String bensonAtomTestS = "BensonAtomTest";

	/**
	 * @param args the command line arguments
	 */
	public static boolean executeCommand(String[] args) {
		if (setup(args)) {
			if (type.equalsIgnoreCase(opticalTestS)) {
				testOpticalSymmetry();
			} else if (type.equalsIgnoreCase(bensonAtomTestS)) {

			}
			System.out.println(buf.toString());
		}
		return foundCommand;
	}

	public static void commands() {
		System.out.println("Expecting the type of Tests:");
		System.out.println(opticalTestS + ":  Test an optical symmetry element(s)");
	}

	public static boolean setup(String[] args) {
		boolean success = true;
		if (args.length < 1) {
			foundCommand = false;
			success = false;
		} else {
			String type = args[0];
			if (type.equalsIgnoreCase(opticalTestS) || type.equalsIgnoreCase(bensonAtomTestS)) {
				if (args.length < 3) {
					opticalSymmetryCommands();
					success = false;
				} else {
					specificTest = args[1];
					nancyS = args[2];

					connection = new ThermoSQLConnection();
					connection.connect();

					IAtomContainer molecule = getMolecule();
					if (molecule != null) {
						buf = new StringBuffer();

						arguments = new ArrayList<String>();
						for (int i = 3; i < args.length; i++) {
							arguments.add(args[i]);
						}
					} else {
						success = false;
					}
				}
			} else {
				foundCommand = false;
				success = false;
			}
		}
		return success;
	}

	public static IAtomContainer getMolecule() {
		NancyLinearFormToMolecule nancyFormToMolecule;
		IAtomContainer molecule = null;
		try {
			nancyFormToMolecule = new NancyLinearFormToMolecule(connection);
			molecule = nancyFormToMolecule.convert(nancyS);

			buf.append("Molecule  -----------------------------------------------\n");
			StructureAsCML cmlstruct = new StructureAsCML(molecule);
			buf.append(cmlstruct.toString() + "\n");
			buf.append("Molecule  -----------------------------------------------\n");
		} catch (SQLException e) {
			System.out.println("Invalid Nancy Linear Form: " + nancyS);
		} catch (CDKException e) {
			System.out.println("Invalid Nancy Linear Form: " + nancyS);
		}
		return molecule;
	}

	private static void testOpticalSymmetry() {
		boolean success = true;
		SetOfBensonThermodynamicBase thermoset = new SetOfBensonThermodynamicBase();
		try {
			ThermoSQLConnection connection = new ThermoSQLConnection();
			connection.connect();

			if (specificTest.equalsIgnoreCase(singleTest)) {
				if (arguments.size() < 1) {
					System.out.println("Expecting optical symmetry name");
					opticalSymmetryCommands();
				} else {
					thermoset = TestOpticalSymmetryElement.performSingleTest(buf, molecule, connection,
							arguments.get(0));
				}
			} else if (specificTest.equalsIgnoreCase(fullTest)) {
				thermoset = TestOpticalSymmetryElement.performWithFullSet(buf, molecule, connection);
			}
		} catch (SQLException e) {
			buf.append(e.toString());
			success = false;
		} catch (CDKException e) {
			buf.append(e.toString());
			success = false;
		} catch (ThermodynamicException e) {
			buf.append(e.toString());
			success = false;
		}
		if (success) {
			if (thermoset.size() > 0) {
				buf.append("======================================================\n");
				buf.append(thermoset.toString());
				buf.append("======================================================\n");
			} else {
				buf.append("No symmetry corrections computed\n");
			}
		}
	}

	private static void metaAtomTest() {
		boolean success = true;
		String bensonAtomType = "BensonAtom";
		SetOfMetaAtomsForSubstitution metaAtomSubstitutions;
		SQLMetaAtomDefinitionFromMetaAtomInfo sqlMetaAtom;
		sqlMetaAtom = new SQLMetaAtomDefinitionFromMetaAtomInfo(connect);
			metaAtomSubstitutions = sqlMetaAtom.createSubstitutionSets(bensonAtomType);
		
		if(specificTest.equalsIgnoreCase(singleTest)) {
	        IAtomContainer substituted = metaAtomSubstitutions.substitute(molecule);
	        buf.append("computeThermodynamicsForMolecule  after meta-atom substitutions\n");
	        StructureAsCML cmlstruct = new StructureAsCML(substituted);
	        buf.append(cmlstruct.toString());
			} catch (ClassNotFoundException | SQLException | CDKException | IOException e) {
				buf.append(e.toString());
			}
	}

	private static void opticalSymmetryCommands() {
		System.out.println(opticalTestS + " SymmetryElement NancyString");
		System.out.println("Test type: " + singleTest + " or " + fullTest);
		System.out.println("NancyString: the molecule name as nancy string");
		System.out.println("Single test:");
		System.out.println("     SymmetryElement: The name of the optical symmetry element");

	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:167)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:152)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-02-11 12:02:33.713
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:167)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:152)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-02-11 12:02:33.715
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:167)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:152)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-02-11 12:02:44.762
!MESSAGE JavaBuilder handling CoreException
!STACK 1
org.eclipse.core.internal.resources.ResourceException(/JThermodynamicData/target/test-classes/metaatom/SubstittueBensonAtomsTest.class)[368]: java.lang.Exception: File not found: /Users/edwardblurock/git/JThermodynamics2/JThermodynamicData/target/test-classes/metaatom/SubstittueBensonAtomsTest.class.
	at org.eclipse.core.internal.resources.ResourceException.provideStackTrace(ResourceException.java:42)
	at org.eclipse.core.internal.resources.ResourceException.<init>(ResourceException.java:38)
	at org.eclipse.core.internal.localstore.FileSystemResourceManager.read(FileSystemResourceManager.java:835)
	at org.eclipse.core.internal.resources.File.getContents(File.java:275)
	at org.eclipse.jdt.internal.core.util.Util.getResourceContentsAsByteArray(Util.java:1157)
	at org.eclipse.jdt.internal.core.builder.IncrementalImageBuilder.writeClassFileCheck(IncrementalImageBuilder.java:942)
	at org.eclipse.jdt.internal.core.builder.IncrementalImageBuilder.writeClassFileContents(IncrementalImageBuilder.java:884)
	at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.writeClassFile(AbstractImageBuilder.java:879)
	at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.acceptResult(AbstractImageBuilder.java:203)
	at org.eclipse.jdt.internal.compiler.Compiler.processCompiledUnits(Compiler.java:615)
	at org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:475)
	at org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:426)
	at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile(AbstractImageBuilder.java:386)
	at org.eclipse.jdt.internal.core.builder.IncrementalImageBuilder.compile(IncrementalImageBuilder.java:371)
	at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile(AbstractImageBuilder.java:318)
	at org.eclipse.jdt.internal.core.builder.IncrementalImageBuilder.incrementalBuildLoop(IncrementalImageBuilder.java:190)
	at org.eclipse.jdt.internal.core.builder.IncrementalImageBuilder.build(IncrementalImageBuilder.java:150)
	at org.eclipse.jdt.internal.core.builder.JavaBuilder.buildDeltas(JavaBuilder.java:292)
	at org.eclipse.jdt.internal.core.builder.JavaBuilder.build(JavaBuilder.java:212)
	at org.eclipse.core.internal.events.BuildManager$2.run(BuildManager.java:832)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.core.internal.events.BuildManager._basicBuild(BuildManager.java:220)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:147)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:263)
	at org.eclipse.core.internal.events.BuildManager$1.run(BuildManager.java:316)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:319)
	at org.eclipse.core.internal.events.BuildManager.basicBuildLoop(BuildManager.java:371)
	at org.eclipse.core.internal.events.BuildManager.build(BuildManager.java:392)
	at org.eclipse.core.internal.events.AutoBuildJob.doBuild(AutoBuildJob.java:154)
	at org.eclipse.core.internal.events.AutoBuildJob.run(AutoBuildJob.java:244)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)
!SUBENTRY 1 org.eclipse.core.resources 4 368 2021-02-11 12:02:44.762
!MESSAGE File not found: /Users/edwardblurock/git/JThermodynamics2/JThermodynamicData/target/test-classes/metaatom/SubstittueBensonAtomsTest.class.
!STACK 0
java.lang.Exception: File not found: /Users/edwardblurock/git/JThermodynamics2/JThermodynamicData/target/test-classes/metaatom/SubstittueBensonAtomsTest.class.
	at org.eclipse.core.internal.resources.ResourceException.provideStackTrace(ResourceException.java:42)
	at org.eclipse.core.internal.resources.ResourceException.<init>(ResourceException.java:38)
	at org.eclipse.core.internal.localstore.FileSystemResourceManager.read(FileSystemResourceManager.java:835)
	at org.eclipse.core.internal.resources.File.getContents(File.java:275)
	at org.eclipse.jdt.internal.core.util.Util.getResourceContentsAsByteArray(Util.java:1157)
	at org.eclipse.jdt.internal.core.builder.IncrementalImageBuilder.writeClassFileCheck(IncrementalImageBuilder.java:942)
	at org.eclipse.jdt.internal.core.builder.IncrementalImageBuilder.writeClassFileContents(IncrementalImageBuilder.java:884)
	at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.writeClassFile(AbstractImageBuilder.java:879)
	at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.acceptResult(AbstractImageBuilder.java:203)
	at org.eclipse.jdt.internal.compiler.Compiler.processCompiledUnits(Compiler.java:615)
	at org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:475)
	at org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:426)
	at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile(AbstractImageBuilder.java:386)
	at org.eclipse.jdt.internal.core.builder.IncrementalImageBuilder.compile(IncrementalImageBuilder.java:371)
	at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile(AbstractImageBuilder.java:318)
	at org.eclipse.jdt.internal.core.builder.IncrementalImageBuilder.incrementalBuildLoop(IncrementalImageBuilder.java:190)
	at org.eclipse.jdt.internal.core.builder.IncrementalImageBuilder.build(IncrementalImageBuilder.java:150)
	at org.eclipse.jdt.internal.core.builder.JavaBuilder.buildDeltas(JavaBuilder.java:292)
	at org.eclipse.jdt.internal.core.builder.JavaBuilder.build(JavaBuilder.java:212)
	at org.eclipse.core.internal.events.BuildManager$2.run(BuildManager.java:832)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.core.internal.events.BuildManager._basicBuild(BuildManager.java:220)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:147)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:263)
	at org.eclipse.core.internal.events.BuildManager$1.run(BuildManager.java:316)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:319)
	at org.eclipse.core.internal.events.BuildManager.basicBuildLoop(BuildManager.java:371)
	at org.eclipse.core.internal.events.BuildManager.build(BuildManager.java:392)
	at org.eclipse.core.internal.events.AutoBuildJob.doBuild(AutoBuildJob.java:154)
	at org.eclipse.core.internal.events.AutoBuildJob.run(AutoBuildJob.java:244)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-02-11 12:02:45.722
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package thermo.build.test;

import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;

import org.openscience.cdk.exception.CDKException;
import org.openscience.cdk.interfaces.IAtomContainer;

import thermo.data.benson.SetOfBensonThermodynamicBase;
import thermo.data.benson.DB.ThermoSQLConnection;
import thermo.data.structure.linearform.NancyLinearFormToMolecule;
import thermo.data.structure.structure.SetOfMetaAtomsForSubstitution;
import thermo.data.structure.structure.StructureAsCML;
import thermo.data.structure.structure.DB.SQLMetaAtomDefinitionFromMetaAtomInfo;
import thermo.exception.ThermodynamicException;

public class CorrectionElementTests {
	static ThermoSQLConnection connection;
	static String type;
	static String specificTest = "";
	static String nancyS = "";
	static StringBuffer buf;
	static ArrayList<String> arguments;
	static boolean foundCommand;
	static IAtomContainer molecule;

	static String singleTest = "Single";
	static String fullTest = "Full";
	static String listelements = "List";
	static String elementS = "Element";
	static String opticalTestS = "OpticalSymmetryTest";
	static String bensonAtomTestS = "BensonAtomTest";

	/**
	 * @param args the command line arguments
	 */
	public static boolean executeCommand(String[] args) {
		if (setup(args)) {
			if (type.equalsIgnoreCase(opticalTestS)) {
				testOpticalSymmetry();
			} else if (type.equalsIgnoreCase(bensonAtomTestS)) {

			}
			System.out.println(buf.toString());
		}
		return foundCommand;
	}

	public static void commands() {
		System.out.println("Expecting the type of Tests:");
		System.out.println(opticalTestS + ":  Test an optical symmetry element(s)");
	}

	public static boolean setup(String[] args) {
		boolean success = true;
		if (args.length < 1) {
			foundCommand = false;
			success = false;
		} else {
			String type = args[0];
			if (type.equalsIgnoreCase(opticalTestS) || type.equalsIgnoreCase(bensonAtomTestS)) {
				if (args.length < 3) {
					opticalSymmetryCommands();
					success = false;
				} else {
					specificTest = args[1];
					nancyS = args[2];

					connection = new ThermoSQLConnection();
					connection.connect();

					IAtomContainer molecule = getMolecule();
					if (molecule != null) {
						buf = new StringBuffer();

						arguments = new ArrayList<String>();
						for (int i = 3; i < args.length; i++) {
							arguments.add(args[i]);
						}
					} else {
						success = false;
					}
				}
			} else {
				foundCommand = false;
				success = false;
			}
		}
		return success;
	}

	public static IAtomContainer getMolecule() {
		NancyLinearFormToMolecule nancyFormToMolecule;
		IAtomContainer molecule = null;
		try {
			nancyFormToMolecule = new NancyLinearFormToMolecule(connection);
			molecule = nancyFormToMolecule.convert(nancyS);

			buf.append("Molecule  -----------------------------------------------\n");
			StructureAsCML cmlstruct = new StructureAsCML(molecule);
			buf.append(cmlstruct.toString() + "\n");
			buf.append("Molecule  -----------------------------------------------\n");
		} catch (SQLException e) {
			System.out.println("Invalid Nancy Linear Form: " + nancyS);
		} catch (CDKException e) {
			System.out.println("Invalid Nancy Linear Form: " + nancyS);
		}
		return molecule;
	}

	private static void testOpticalSymmetry() {
		boolean success = true;
		SetOfBensonThermodynamicBase thermoset = new SetOfBensonThermodynamicBase();
		try {
			ThermoSQLConnection connection = new ThermoSQLConnection();
			connection.connect();

			if (specificTest.equalsIgnoreCase(singleTest)) {
				if (arguments.size() < 1) {
					System.out.println("Expecting optical symmetry name");
					opticalSymmetryCommands();
				} else {
					thermoset = TestOpticalSymmetryElement.performSingleTest(buf, molecule, connection,
							arguments.get(0));
				}
			} else if (specificTest.equalsIgnoreCase(fullTest)) {
				thermoset = TestOpticalSymmetryElement.performWithFullSet(buf, molecule, connection);
			}
		} catch (SQLException e) {
			buf.append(e.toString());
			success = false;
		} catch (CDKException e) {
			buf.append(e.toString());
			success = false;
		} catch (ThermodynamicException e) {
			buf.append(e.toString());
			success = false;
		}
		if (success) {
			if (thermoset.size() > 0) {
				buf.append("======================================================\n");
				buf.append(thermoset.toString());
				buf.append("======================================================\n");
			} else {
				buf.append("No symmetry corrections computed\n");
			}
		}
	}

	private static void metaAtomTest() {
		boolean success = true;
		String bensonAtomType = "BensonAtom";
		SetOfMetaAtomsForSubstitution metaAtomSubstitutions;
		SQLMetaAtomDefinitionFromMetaAtomInfo sqlMetaAtom;
		sqlMetaAtom = new SQLMetaAtomDefinitionFromMetaAtomInfo(connect);
			metaAtomSubstitutions = sqlMetaAtom.createSubstitutionSets(bensonAtomType);
		
		if(specificTest.equalsIgnoreCase(singleTest)) {
	        IAtomContainer substituted = metaAtomSubstitutions.substitute(molecule);
	        buf.append("computeThermodynamicsForMolecule  after meta-atom substitutions\n");
	        StructureAsCML cmlstruct = new StructureAsCML(substituted);
	        buf.append(cmlstruct.toString());
			} catch (ClassNotFoundException | SQLException | CDKException | IOException e) {
				buf.append(e.toString());
			}
	}

	private static void opticalSymmetryCommands() {
		System.out.println(opticalTestS + " SymmetryElement NancyString");
		System.out.println("Test type: " + singleTest + " or " + fullTest);
		System.out.println("NancyString: the molecule name as nancy string");
		System.out.println("Single test:");
		System.out.println("     SymmetryElement: The name of the optical symmetry element");

	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:449)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2021-02-11 12:02:45.722
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:449)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2021-02-11 12:02:45.724
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:449)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2021-02-11 12:02:46.969
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package thermo.build.test;

import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;

import org.openscience.cdk.exception.CDKException;
import org.openscience.cdk.interfaces.IAtomContainer;

import thermo.data.benson.SetOfBensonThermodynamicBase;
import thermo.data.benson.DB.ThermoSQLConnection;
import thermo.data.structure.linearform.NancyLinearFormToMolecule;
import thermo.data.structure.structure.SetOfMetaAtomsForSubstitution;
import thermo.data.structure.structure.StructureAsCML;
import thermo.data.structure.structure.DB.SQLMetaAtomDefinitionFromMetaAtomInfo;
import thermo.exception.ThermodynamicException;

public class CorrectionElementTests {
	static ThermoSQLConnection connection;
	static String type;
	static String specificTest = "";
	static String nancyS = "";
	static StringBuffer buf;
	static ArrayList<String> arguments;
	static boolean foundCommand;
	static IAtomContainer molecule;

	static String singleTest = "Single";
	static String fullTest = "Full";
	static String listelements = "List";
	static String elementS = "Element";
	static String opticalTestS = "OpticalSymmetryTest";
	static String bensonAtomTestS = "BensonAtomTest";

	/**
	 * @param args the command line arguments
	 */
	public static boolean executeCommand(String[] args) {
		if (setup(args)) {
			if (type.equalsIgnoreCase(opticalTestS)) {
				testOpticalSymmetry();
			} else if (type.equalsIgnoreCase(bensonAtomTestS)) {

			}
			System.out.println(buf.toString());
		}
		return foundCommand;
	}

	public static void commands() {
		System.out.println("Expecting the type of Tests:");
		System.out.println(opticalTestS + ":  Test an optical symmetry element(s)");
	}

	public static boolean setup(String[] args) {
		boolean success = true;
		if (args.length < 1) {
			foundCommand = false;
			success = false;
		} else {
			String type = args[0];
			if (type.equalsIgnoreCase(opticalTestS) || type.equalsIgnoreCase(bensonAtomTestS)) {
				if (args.length < 3) {
					opticalSymmetryCommands();
					success = false;
				} else {
					specificTest = args[1];
					nancyS = args[2];

					connection = new ThermoSQLConnection();
					connection.connect();

					IAtomContainer molecule = getMolecule();
					if (molecule != null) {
						buf = new StringBuffer();

						arguments = new ArrayList<String>();
						for (int i = 3; i < args.length; i++) {
							arguments.add(args[i]);
						}
					} else {
						success = false;
					}
				}
			} else {
				foundCommand = false;
				success = false;
			}
		}
		return success;
	}

	public static IAtomContainer getMolecule() {
		NancyLinearFormToMolecule nancyFormToMolecule;
		IAtomContainer molecule = null;
		try {
			nancyFormToMolecule = new NancyLinearFormToMolecule(connection);
			molecule = nancyFormToMolecule.convert(nancyS);

			buf.append("Molecule  -----------------------------------------------\n");
			StructureAsCML cmlstruct = new StructureAsCML(molecule);
			buf.append(cmlstruct.toString() + "\n");
			buf.append("Molecule  -----------------------------------------------\n");
		} catch (SQLException e) {
			System.out.println("Invalid Nancy Linear Form: " + nancyS);
		} catch (CDKException e) {
			System.out.println("Invalid Nancy Linear Form: " + nancyS);
		}
		return molecule;
	}

	private static void testOpticalSymmetry() {
		boolean success = true;
		SetOfBensonThermodynamicBase thermoset = new SetOfBensonThermodynamicBase();
		try {
			ThermoSQLConnection connection = new ThermoSQLConnection();
			connection.connect();

			if (specificTest.equalsIgnoreCase(singleTest)) {
				if (arguments.size() < 1) {
					System.out.println("Expecting optical symmetry name");
					opticalSymmetryCommands();
				} else {
					thermoset = TestOpticalSymmetryElement.performSingleTest(buf, molecule, connection,
							arguments.get(0));
				}
			} else if (specificTest.equalsIgnoreCase(fullTest)) {
				thermoset = TestOpticalSymmetryElement.performWithFullSet(buf, molecule, connection);
			}
		} catch (SQLException e) {
			buf.append(e.toString());
			success = false;
		} catch (CDKException e) {
			buf.append(e.toString());
			success = false;
		} catch (ThermodynamicException e) {
			buf.append(e.toString());
			success = false;
		}
		if (success) {
			if (thermoset.size() > 0) {
				buf.append("======================================================\n");
				buf.append(thermoset.toString());
				buf.append("======================================================\n");
			} else {
				buf.append("No symmetry corrections computed\n");
			}
		}
	}

	private static void metaAtomTest() {
		boolean success = true;
		String bensonAtomType = "BensonAtom";
		SetOfMetaAtomsForSubstitution metaAtomSubstitutions;
		SQLMetaAtomDefinitionFromMetaAtomInfo sqlMetaAtom;
		sqlMetaAtom = new SQLMetaAtomDefinitionFromMetaAtomInfo(connect);
			metaAtomSubstitutions = sqlMetaAtom.createSubstitutionSets(bensonAtomType);
		
		if(specificTest.equalsIgnoreCase(singleTest)) {
	        IAtomContainer substituted = metaAtomSubstitutions.substitute(molecule);
	        buf.append("computeThermodynamicsForMolecule  after meta-atom substitutions\n");
	        StructureAsCML cmlstruct = new StructureAsCML(substituted);
	        buf.append(cmlstruct.toString());
			} catch (ClassNotFoundException | SQLException | CDKException | IOException e) {
				buf.append(e.toString());
			}
	}

	private static void opticalSymmetryCommands() {
		System.out.println(opticalTestS + " SymmetryElement NancyString");
		System.out.println("Test type: " + singleTest + " or " + fullTest);
		System.out.println("NancyString: the molecule name as nancy string");
		System.out.println("Single test:");
		System.out.println("     SymmetryElement: The name of the optical symmetry element");

	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-02-11 12:02:46.970
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-02-11 12:02:46.972
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2021-02-11 12:02:46.986
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package thermo.build.test;

import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;

import org.openscience.cdk.exception.CDKException;
import org.openscience.cdk.interfaces.IAtomContainer;

import thermo.data.benson.SetOfBensonThermodynamicBase;
import thermo.data.benson.DB.ThermoSQLConnection;
import thermo.data.structure.linearform.NancyLinearFormToMolecule;
import thermo.data.structure.structure.SetOfMetaAtomsForSubstitution;
import thermo.data.structure.structure.StructureAsCML;
import thermo.data.structure.structure.DB.SQLMetaAtomDefinitionFromMetaAtomInfo;
import thermo.exception.ThermodynamicException;

public class CorrectionElementTests {
	static ThermoSQLConnection connection;
	static String type;
	static String specificTest = "";
	static String nancyS = "";
	static StringBuffer buf;
	static ArrayList<String> arguments;
	static boolean foundCommand;
	static IAtomContainer molecule;

	static String singleTest = "Single";
	static String fullTest = "Full";
	static String listelements = "List";
	static String elementS = "Element";
	static String opticalTestS = "OpticalSymmetryTest";
	static String bensonAtomTestS = "BensonAtomTest";

	/**
	 * @param args the command line arguments
	 */
	public static boolean executeCommand(String[] args) {
		if (setup(args)) {
			if (type.equalsIgnoreCase(opticalTestS)) {
				testOpticalSymmetry();
			} else if (type.equalsIgnoreCase(bensonAtomTestS)) {

			}
			System.out.println(buf.toString());
		}
		return foundCommand;
	}

	public static void commands() {
		System.out.println("Expecting the type of Tests:");
		System.out.println(opticalTestS + ":  Test an optical symmetry element(s)");
	}

	public static boolean setup(String[] args) {
		boolean success = true;
		if (args.length < 1) {
			foundCommand = false;
			success = false;
		} else {
			String type = args[0];
			if (type.equalsIgnoreCase(opticalTestS) || type.equalsIgnoreCase(bensonAtomTestS)) {
				if (args.length < 3) {
					opticalSymmetryCommands();
					success = false;
				} else {
					specificTest = args[1];
					nancyS = args[2];

					connection = new ThermoSQLConnection();
					connection.connect();

					IAtomContainer molecule = getMolecule();
					if (molecule != null) {
						buf = new StringBuffer();

						arguments = new ArrayList<String>();
						for (int i = 3; i < args.length; i++) {
							arguments.add(args[i]);
						}
					} else {
						success = false;
					}
				}
			} else {
				foundCommand = false;
				success = false;
			}
		}
		return success;
	}

	public static IAtomContainer getMolecule() {
		NancyLinearFormToMolecule nancyFormToMolecule;
		IAtomContainer molecule = null;
		try {
			nancyFormToMolecule = new NancyLinearFormToMolecule(connection);
			molecule = nancyFormToMolecule.convert(nancyS);

			buf.append("Molecule  -----------------------------------------------\n");
			StructureAsCML cmlstruct = new StructureAsCML(molecule);
			buf.append(cmlstruct.toString() + "\n");
			buf.append("Molecule  -----------------------------------------------\n");
		} catch (SQLException e) {
			System.out.println("Invalid Nancy Linear Form: " + nancyS);
		} catch (CDKException e) {
			System.out.println("Invalid Nancy Linear Form: " + nancyS);
		}
		return molecule;
	}

	private static void testOpticalSymmetry() {
		boolean success = true;
		SetOfBensonThermodynamicBase thermoset = new SetOfBensonThermodynamicBase();
		try {
			ThermoSQLConnection connection = new ThermoSQLConnection();
			connection.connect();

			if (specificTest.equalsIgnoreCase(singleTest)) {
				if (arguments.size() < 1) {
					System.out.println("Expecting optical symmetry name");
					opticalSymmetryCommands();
				} else {
					thermoset = TestOpticalSymmetryElement.performSingleTest(buf, molecule, connection,
							arguments.get(0));
				}
			} else if (specificTest.equalsIgnoreCase(fullTest)) {
				thermoset = TestOpticalSymmetryElement.performWithFullSet(buf, molecule, connection);
			}
		} catch (SQLException e) {
			buf.append(e.toString());
			success = false;
		} catch (CDKException e) {
			buf.append(e.toString());
			success = false;
		} catch (ThermodynamicException e) {
			buf.append(e.toString());
			success = false;
		}
		if (success) {
			if (thermoset.size() > 0) {
				buf.append("======================================================\n");
				buf.append(thermoset.toString());
				buf.append("======================================================\n");
			} else {
				buf.append("No symmetry corrections computed\n");
			}
		}
	}

	private static void metaAtomTest() {
		boolean success = true;
		String bensonAtomType = "BensonAtom";
		SetOfMetaAtomsForSubstitution metaAtomSubstitutions;
		SQLMetaAtomDefinitionFromMetaAtomInfo sqlMetaAtom;
		sqlMetaAtom = new SQLMetaAtomDefinitionFromMetaAtomInfo(connect);
			metaAtomSubstitutions = sqlMetaAtom.createSubstitutionSets(bensonAtomType);
		
		if(specificTest.equalsIgnoreCase(singleTest)) {
	        IAtomContainer substituted = metaAtomSubstitutions.substitute(molecule);
	        buf.append("computeThermodynamicsForMolecule  after meta-atom substitutions\n");
	        StructureAsCML cmlstruct = new StructureAsCML(substituted);
	        buf.append(cmlstruct.toString());
			} catch (ClassNotFoundException | SQLException | CDKException | IOException e) {
				buf.append(e.toString());
			}
	}

	private static void opticalSymmetryCommands() {
		System.out.println(opticalTestS + " SymmetryElement NancyString");
		System.out.println("Test type: " + singleTest + " or " + fullTest);
		System.out.println("NancyString: the molecule name as nancy string");
		System.out.println("Single test:");
		System.out.println("     SymmetryElement: The name of the optical symmetry element");

	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-02-11 12:02:46.987
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-02-11 12:02:46.987
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2021-02-11 12:02:49.648
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package thermo.build.test;

import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;

import org.openscience.cdk.exception.CDKException;
import org.openscience.cdk.interfaces.IAtomContainer;

import thermo.data.benson.SetOfBensonThermodynamicBase;
import thermo.data.benson.DB.ThermoSQLConnection;
import thermo.data.structure.linearform.NancyLinearFormToMolecule;
import thermo.data.structure.structure.SetOfMetaAtomsForSubstitution;
import thermo.data.structure.structure.StructureAsCML;
import thermo.data.structure.structure.DB.SQLMetaAtomDefinitionFromMetaAtomInfo;
import thermo.exception.ThermodynamicException;

public class CorrectionElementTests {
	static ThermoSQLConnection connection;
	static String type;
	static String specificTest = "";
	static String nancyS = "";
	static StringBuffer buf;
	static ArrayList<String> arguments;
	static boolean foundCommand;
	static IAtomContainer molecule;

	static String singleTest = "Single";
	static String fullTest = "Full";
	static String listelements = "List";
	static String elementS = "Element";
	static String opticalTestS = "OpticalSymmetryTest";
	static String bensonAtomTestS = "BensonAtomTest";

	/**
	 * @param args the command line arguments
	 */
	public static boolean executeCommand(String[] args) {
		if (setup(args)) {
			if (type.equalsIgnoreCase(opticalTestS)) {
				testOpticalSymmetry();
			} else if (type.equalsIgnoreCase(bensonAtomTestS)) {

			}
			System.out.println(buf.toString());
		}
		return foundCommand;
	}

	public static void commands() {
		System.out.println("Expecting the type of Tests:");
		System.out.println(opticalTestS + ":  Test an optical symmetry element(s)");
	}

	public static boolean setup(String[] args) {
		boolean success = true;
		if (args.length < 1) {
			foundCommand = false;
			success = false;
		} else {
			String type = args[0];
			if (type.equalsIgnoreCase(opticalTestS) || type.equalsIgnoreCase(bensonAtomTestS)) {
				if (args.length < 3) {
					opticalSymmetryCommands();
					success = false;
				} else {
					specificTest = args[1];
					nancyS = args[2];

					connection = new ThermoSQLConnection();
					connection.connect();

					IAtomContainer molecule = getMolecule();
					if (molecule != null) {
						buf = new StringBuffer();

						arguments = new ArrayList<String>();
						for (int i = 3; i < args.length; i++) {
							arguments.add(args[i]);
						}
					} else {
						success = false;
					}
				}
			} else {
				foundCommand = false;
				success = false;
			}
		}
		return success;
	}

	public static IAtomContainer getMolecule() {
		NancyLinearFormToMolecule nancyFormToMolecule;
		IAtomContainer molecule = null;
		try {
			nancyFormToMolecule = new NancyLinearFormToMolecule(connection);
			molecule = nancyFormToMolecule.convert(nancyS);

			buf.append("Molecule  -----------------------------------------------\n");
			StructureAsCML cmlstruct = new StructureAsCML(molecule);
			buf.append(cmlstruct.toString() + "\n");
			buf.append("Molecule  -----------------------------------------------\n");
		} catch (SQLException e) {
			System.out.println("Invalid Nancy Linear Form: " + nancyS);
		} catch (CDKException e) {
			System.out.println("Invalid Nancy Linear Form: " + nancyS);
		}
		return molecule;
	}

	private static void testOpticalSymmetry() {
		boolean success = true;
		SetOfBensonThermodynamicBase thermoset = new SetOfBensonThermodynamicBase();
		try {
			ThermoSQLConnection connection = new ThermoSQLConnection();
			connection.connect();

			if (specificTest.equalsIgnoreCase(singleTest)) {
				if (arguments.size() < 1) {
					System.out.println("Expecting optical symmetry name");
					opticalSymmetryCommands();
				} else {
					thermoset = TestOpticalSymmetryElement.performSingleTest(buf, molecule, connection,
							arguments.get(0));
				}
			} else if (specificTest.equalsIgnoreCase(fullTest)) {
				thermoset = TestOpticalSymmetryElement.performWithFullSet(buf, molecule, connection);
			}
		} catch (SQLException e) {
			buf.append(e.toString());
			success = false;
		} catch (CDKException e) {
			buf.append(e.toString());
			success = false;
		} catch (ThermodynamicException e) {
			buf.append(e.toString());
			success = false;
		}
		if (success) {
			if (thermoset.size() > 0) {
				buf.append("======================================================\n");
				buf.append(thermoset.toString());
				buf.append("======================================================\n");
			} else {
				buf.append("No symmetry corrections computed\n");
			}
		}
	}

	private static void metaAtomTest() {
		boolean success = true;
		String bensonAtomType = "BensonAtom";
		SetOfMetaAtomsForSubstitution metaAtomSubstitutions;
		SQLMetaAtomDefinitionFromMetaAtomInfo sqlMetaAtom;
		sqlMetaAtom = new SQLMetaAtomDefinitionFromMetaAtomInfo(connect);
			metaAtomSubstitutions = sqlMetaAtom.createSubstitutionSets(bensonAtomType);
		
		if(specificTest.equalsIgnoreCase(singleTest)) {
	        IAtomContainer substituted = metaAtomSubstitutions.substitute(molecule);
	        buf.append("computeThermodynamicsForMolecule  after meta-atom substitutions\n");
	        StructureAsCML cmlstruct = new StructureAsCML(substituted);
	        buf.append(cmlstruct.toString());
			} catch (ClassNotFoundException | SQLException | CDKException | IOException e) {
				buf.append(e.toString());
			}
	}

	private static void opticalSymmetryCommands() {
		System.out.println(opticalTestS + " SymmetryElement NancyString");
		System.out.println("Test type: " + singleTest + " or " + fullTest);
		System.out.println("NancyString: the molecule name as nancy string");
		System.out.println("Single test:");
		System.out.println("     SymmetryElement: The name of the optical symmetry element");

	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-02-11 12:02:49.649
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-02-11 12:02:49.651
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2021-02-11 12:02:52.852
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package thermo.build.test;

import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;

import org.openscience.cdk.exception.CDKException;
import org.openscience.cdk.interfaces.IAtomContainer;

import thermo.data.benson.SetOfBensonThermodynamicBase;
import thermo.data.benson.DB.ThermoSQLConnection;
import thermo.data.structure.linearform.NancyLinearFormToMolecule;
import thermo.data.structure.structure.SetOfMetaAtomsForSubstitution;
import thermo.data.structure.structure.StructureAsCML;
import thermo.data.structure.structure.DB.SQLMetaAtomDefinitionFromMetaAtomInfo;
import thermo.exception.ThermodynamicException;

public class CorrectionElementTests {
	static ThermoSQLConnection connection;
	static String type;
	static String specificTest = "";
	static String nancyS = "";
	static StringBuffer buf;
	static ArrayList<String> arguments;
	static boolean foundCommand;
	static IAtomContainer molecule;

	static String singleTest = "Single";
	static String fullTest = "Full";
	static String listelements = "List";
	static String elementS = "Element";
	static String opticalTestS = "OpticalSymmetryTest";
	static String bensonAtomTestS = "BensonAtomTest";

	/**
	 * @param args the command line arguments
	 */
	public static boolean executeCommand(String[] args) {
		if (setup(args)) {
			if (type.equalsIgnoreCase(opticalTestS)) {
				testOpticalSymmetry();
			} else if (type.equalsIgnoreCase(bensonAtomTestS)) {

			}
			System.out.println(buf.toString());
		}
		return foundCommand;
	}

	public static void commands() {
		System.out.println("Expecting the type of Tests:");
		System.out.println(opticalTestS + ":  Test an optical symmetry element(s)");
	}

	public static boolean setup(String[] args) {
		boolean success = true;
		if (args.length < 1) {
			foundCommand = false;
			success = false;
		} else {
			String type = args[0];
			if (type.equalsIgnoreCase(opticalTestS) || type.equalsIgnoreCase(bensonAtomTestS)) {
				if (args.length < 3) {
					opticalSymmetryCommands();
					success = false;
				} else {
					specificTest = args[1];
					nancyS = args[2];

					connection = new ThermoSQLConnection();
					connection.connect();

					IAtomContainer molecule = getMolecule();
					if (molecule != null) {
						buf = new StringBuffer();

						arguments = new ArrayList<String>();
						for (int i = 3; i < args.length; i++) {
							arguments.add(args[i]);
						}
					} else {
						success = false;
					}
				}
			} else {
				foundCommand = false;
				success = false;
			}
		}
		return success;
	}

	public static IAtomContainer getMolecule() {
		NancyLinearFormToMolecule nancyFormToMolecule;
		IAtomContainer molecule = null;
		try {
			nancyFormToMolecule = new NancyLinearFormToMolecule(connection);
			molecule = nancyFormToMolecule.convert(nancyS);

			buf.append("Molecule  -----------------------------------------------\n");
			StructureAsCML cmlstruct = new StructureAsCML(molecule);
			buf.append(cmlstruct.toString() + "\n");
			buf.append("Molecule  -----------------------------------------------\n");
		} catch (SQLException e) {
			System.out.println("Invalid Nancy Linear Form: " + nancyS);
		} catch (CDKException e) {
			System.out.println("Invalid Nancy Linear Form: " + nancyS);
		}
		return molecule;
	}

	private static void testOpticalSymmetry() {
		boolean success = true;
		SetOfBensonThermodynamicBase thermoset = new SetOfBensonThermodynamicBase();
		try {
			ThermoSQLConnection connection = new ThermoSQLConnection();
			connection.connect();

			if (specificTest.equalsIgnoreCase(singleTest)) {
				if (arguments.size() < 1) {
					System.out.println("Expecting optical symmetry name");
					opticalSymmetryCommands();
				} else {
					thermoset = TestOpticalSymmetryElement.performSingleTest(buf, molecule, connection,
							arguments.get(0));
				}
			} else if (specificTest.equalsIgnoreCase(fullTest)) {
				thermoset = TestOpticalSymmetryElement.performWithFullSet(buf, molecule, connection);
			}
		} catch (SQLException e) {
			buf.append(e.toString());
			success = false;
		} catch (CDKException e) {
			buf.append(e.toString());
			success = false;
		} catch (ThermodynamicException e) {
			buf.append(e.toString());
			success = false;
		}
		if (success) {
			if (thermoset.size() > 0) {
				buf.append("======================================================\n");
				buf.append(thermoset.toString());
				buf.append("======================================================\n");
			} else {
				buf.append("No symmetry corrections computed\n");
			}
		}
	}

	private static void metaAtomTest() {
		boolean success = true;
		String bensonAtomType = "BensonAtom";
		SetOfMetaAtomsForSubstitution metaAtomSubstitutions;
		SQLMetaAtomDefinitionFromMetaAtomInfo sqlMetaAtom;
		sqlMetaAtom = new SQLMetaAtomDefinitionFromMetaAtomInfo(connect);
			metaAtomSubstitutions = sqlMetaAtom.createSubstitutionSets(bensonAtomType);
		
		if(specificTest.equalsIgnoreCase(singleTest)) {
	        IAtomContainer substituted = metaAtomSubstitutions.substitute(molecule);
	        buf.append("computeThermodynamicsForMolecule  after meta-atom substitutions\n");
	        StructureAsCML cmlstruct = new StructureAsCML(substituted);
	        buf.append(cmlstruct.toString());
			} catch (ClassNotFoundException | SQLException | CDKException | IOException e) {
				buf.append(e.toString());
			}
	}

	private static void opticalSymmetryCommands() {
		System.out.println(opticalTestS + " SymmetryElement NancyString");
		System.out.println("Test type: " + singleTest + " or " + fullTest);
		System.out.println("NancyString: the molecule name as nancy string");
		System.out.println("Single test:");
		System.out.println("     SymmetryElement: The name of the optical symmetry element");

	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:167)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:152)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-02-11 12:02:52.853
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:167)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:152)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-02-11 12:02:52.855
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:167)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:152)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-02-11 12:02:54.287
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package thermo.build.test;

import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;

import org.openscience.cdk.exception.CDKException;
import org.openscience.cdk.interfaces.IAtomContainer;

import thermo.data.benson.SetOfBensonThermodynamicBase;
import thermo.data.benson.DB.ThermoSQLConnection;
import thermo.data.structure.linearform.NancyLinearFormToMolecule;
import thermo.data.structure.structure.SetOfMetaAtomsForSubstitution;
import thermo.data.structure.structure.StructureAsCML;
import thermo.data.structure.structure.DB.SQLMetaAtomDefinitionFromMetaAtomInfo;
import thermo.exception.ThermodynamicException;

public class CorrectionElementTests {
	static ThermoSQLConnection connection;
	static String type;
	static String specificTest = "";
	static String nancyS = "";
	static StringBuffer buf;
	static ArrayList<String> arguments;
	static boolean foundCommand;
	static IAtomContainer molecule;

	static String singleTest = "Single";
	static String fullTest = "Full";
	static String listelements = "List";
	static String elementS = "Element";
	static String opticalTestS = "OpticalSymmetryTest";
	static String bensonAtomTestS = "BensonAtomTest";

	/**
	 * @param args the command line arguments
	 */
	public static boolean executeCommand(String[] args) {
		if (setup(args)) {
			if (type.equalsIgnoreCase(opticalTestS)) {
				testOpticalSymmetry();
			} else if (type.equalsIgnoreCase(bensonAtomTestS)) {

			}
			System.out.println(buf.toString());
		}
		return foundCommand;
	}

	public static void commands() {
		System.out.println("Expecting the type of Tests:");
		System.out.println(opticalTestS + ":  Test an optical symmetry element(s)");
	}

	public static boolean setup(String[] args) {
		boolean success = true;
		if (args.length < 1) {
			foundCommand = false;
			success = false;
		} else {
			String type = args[0];
			if (type.equalsIgnoreCase(opticalTestS) || type.equalsIgnoreCase(bensonAtomTestS)) {
				if (args.length < 3) {
					opticalSymmetryCommands();
					success = false;
				} else {
					specificTest = args[1];
					nancyS = args[2];

					connection = new ThermoSQLConnection();
					connection.connect();

					IAtomContainer molecule = getMolecule();
					if (molecule != null) {
						buf = new StringBuffer();

						arguments = new ArrayList<String>();
						for (int i = 3; i < args.length; i++) {
							arguments.add(args[i]);
						}
					} else {
						success = false;
					}
				}
			} else {
				foundCommand = false;
				success = false;
			}
		}
		return success;
	}

	public static IAtomContainer getMolecule() {
		NancyLinearFormToMolecule nancyFormToMolecule;
		IAtomContainer molecule = null;
		try {
			nancyFormToMolecule = new NancyLinearFormToMolecule(connection);
			molecule = nancyFormToMolecule.convert(nancyS);

			buf.append("Molecule  -----------------------------------------------\n");
			StructureAsCML cmlstruct = new StructureAsCML(molecule);
			buf.append(cmlstruct.toString() + "\n");
			buf.append("Molecule  -----------------------------------------------\n");
		} catch (SQLException e) {
			System.out.println("Invalid Nancy Linear Form: " + nancyS);
		} catch (CDKException e) {
			System.out.println("Invalid Nancy Linear Form: " + nancyS);
		}
		return molecule;
	}

	private static void testOpticalSymmetry() {
		boolean success = true;
		SetOfBensonThermodynamicBase thermoset = new SetOfBensonThermodynamicBase();
		try {
			ThermoSQLConnection connection = new ThermoSQLConnection();
			connection.connect();

			if (specificTest.equalsIgnoreCase(singleTest)) {
				if (arguments.size() < 1) {
					System.out.println("Expecting optical symmetry name");
					opticalSymmetryCommands();
				} else {
					thermoset = TestOpticalSymmetryElement.performSingleTest(buf, molecule, connection,
							arguments.get(0));
				}
			} else if (specificTest.equalsIgnoreCase(fullTest)) {
				thermoset = TestOpticalSymmetryElement.performWithFullSet(buf, molecule, connection);
			}
		} catch (SQLException e) {
			buf.append(e.toString());
			success = false;
		} catch (CDKException e) {
			buf.append(e.toString());
			success = false;
		} catch (ThermodynamicException e) {
			buf.append(e.toString());
			success = false;
		}
		if (success) {
			if (thermoset.size() > 0) {
				buf.append("======================================================\n");
				buf.append(thermoset.toString());
				buf.append("======================================================\n");
			} else {
				buf.append("No symmetry corrections computed\n");
			}
		}
	}

	private static void metaAtomTest() {
		boolean success = true;
		String bensonAtomType = "BensonAtom";
		SetOfMetaAtomsForSubstitution metaAtomSubstitutions;
		SQLMetaAtomDefinitionFromMetaAtomInfo sqlMetaAtom;
		sqlMetaAtom = new SQLMetaAtomDefinitionFromMetaAtomInfo(connection);
			metaAtomSubstitutions = sqlMetaAtom.createSubstitutionSets(bensonAtomType);
		
		if(specificTest.equalsIgnoreCase(singleTest)) {
	        IAtomContainer substituted = metaAtomSubstitutions.substitute(molecule);
	        buf.append("computeThermodynamicsForMolecule  after meta-atom substitutions\n");
	        StructureAsCML cmlstruct = new StructureAsCML(substituted);
	        buf.append(cmlstruct.toString());
			} catch (ClassNotFoundException | SQLException | CDKException | IOException e) {
				buf.append(e.toString());
			}
	}

	private static void opticalSymmetryCommands() {
		System.out.println(opticalTestS + " SymmetryElement NancyString");
		System.out.println("Test type: " + singleTest + " or " + fullTest);
		System.out.println("NancyString: the molecule name as nancy string");
		System.out.println("Single test:");
		System.out.println("     SymmetryElement: The name of the optical symmetry element");

	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:449)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:268)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2021-02-11 12:02:54.287
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:449)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:268)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2021-02-11 12:02:54.289
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:449)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:268)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2021-02-11 12:02:54.299
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package thermo.build.test;

import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;

import org.openscience.cdk.exception.CDKException;
import org.openscience.cdk.interfaces.IAtomContainer;

import thermo.data.benson.SetOfBensonThermodynamicBase;
import thermo.data.benson.DB.ThermoSQLConnection;
import thermo.data.structure.linearform.NancyLinearFormToMolecule;
import thermo.data.structure.structure.SetOfMetaAtomsForSubstitution;
import thermo.data.structure.structure.StructureAsCML;
import thermo.data.structure.structure.DB.SQLMetaAtomDefinitionFromMetaAtomInfo;
import thermo.exception.ThermodynamicException;

public class CorrectionElementTests {
	static ThermoSQLConnection connection;
	static String type;
	static String specificTest = "";
	static String nancyS = "";
	static StringBuffer buf;
	static ArrayList<String> arguments;
	static boolean foundCommand;
	static IAtomContainer molecule;

	static String singleTest = "Single";
	static String fullTest = "Full";
	static String listelements = "List";
	static String elementS = "Element";
	static String opticalTestS = "OpticalSymmetryTest";
	static String bensonAtomTestS = "BensonAtomTest";

	/**
	 * @param args the command line arguments
	 */
	public static boolean executeCommand(String[] args) {
		if (setup(args)) {
			if (type.equalsIgnoreCase(opticalTestS)) {
				testOpticalSymmetry();
			} else if (type.equalsIgnoreCase(bensonAtomTestS)) {

			}
			System.out.println(buf.toString());
		}
		return foundCommand;
	}

	public static void commands() {
		System.out.println("Expecting the type of Tests:");
		System.out.println(opticalTestS + ":  Test an optical symmetry element(s)");
	}

	public static boolean setup(String[] args) {
		boolean success = true;
		if (args.length < 1) {
			foundCommand = false;
			success = false;
		} else {
			String type = args[0];
			if (type.equalsIgnoreCase(opticalTestS) || type.equalsIgnoreCase(bensonAtomTestS)) {
				if (args.length < 3) {
					opticalSymmetryCommands();
					success = false;
				} else {
					specificTest = args[1];
					nancyS = args[2];

					connection = new ThermoSQLConnection();
					connection.connect();

					IAtomContainer molecule = getMolecule();
					if (molecule != null) {
						buf = new StringBuffer();

						arguments = new ArrayList<String>();
						for (int i = 3; i < args.length; i++) {
							arguments.add(args[i]);
						}
					} else {
						success = false;
					}
				}
			} else {
				foundCommand = false;
				success = false;
			}
		}
		return success;
	}

	public static IAtomContainer getMolecule() {
		NancyLinearFormToMolecule nancyFormToMolecule;
		IAtomContainer molecule = null;
		try {
			nancyFormToMolecule = new NancyLinearFormToMolecule(connection);
			molecule = nancyFormToMolecule.convert(nancyS);

			buf.append("Molecule  -----------------------------------------------\n");
			StructureAsCML cmlstruct = new StructureAsCML(molecule);
			buf.append(cmlstruct.toString() + "\n");
			buf.append("Molecule  -----------------------------------------------\n");
		} catch (SQLException e) {
			System.out.println("Invalid Nancy Linear Form: " + nancyS);
		} catch (CDKException e) {
			System.out.println("Invalid Nancy Linear Form: " + nancyS);
		}
		return molecule;
	}

	private static void testOpticalSymmetry() {
		boolean success = true;
		SetOfBensonThermodynamicBase thermoset = new SetOfBensonThermodynamicBase();
		try {
			ThermoSQLConnection connection = new ThermoSQLConnection();
			connection.connect();

			if (specificTest.equalsIgnoreCase(singleTest)) {
				if (arguments.size() < 1) {
					System.out.println("Expecting optical symmetry name");
					opticalSymmetryCommands();
				} else {
					thermoset = TestOpticalSymmetryElement.performSingleTest(buf, molecule, connection,
							arguments.get(0));
				}
			} else if (specificTest.equalsIgnoreCase(fullTest)) {
				thermoset = TestOpticalSymmetryElement.performWithFullSet(buf, molecule, connection);
			}
		} catch (SQLException e) {
			buf.append(e.toString());
			success = false;
		} catch (CDKException e) {
			buf.append(e.toString());
			success = false;
		} catch (ThermodynamicException e) {
			buf.append(e.toString());
			success = false;
		}
		if (success) {
			if (thermoset.size() > 0) {
				buf.append("======================================================\n");
				buf.append(thermoset.toString());
				buf.append("======================================================\n");
			} else {
				buf.append("No symmetry corrections computed\n");
			}
		}
	}

	private static void metaAtomTest() {
		boolean success = true;
		String bensonAtomType = "BensonAtom";
		SetOfMetaAtomsForSubstitution metaAtomSubstitutions;
		SQLMetaAtomDefinitionFromMetaAtomInfo sqlMetaAtom;
		sqlMetaAtom = new SQLMetaAtomDefinitionFromMetaAtomInfo(connection);
			metaAtomSubstitutions = sqlMetaAtom.createSubstitutionSets(bensonAtomType);
		
		if(specificTest.equalsIgnoreCase(singleTest)) {
	        IAtomContainer substituted = metaAtomSubstitutions.substitute(molecule);
	        buf.append("computeThermodynamicsForMolecule  after meta-atom substitutions\n");
	        StructureAsCML cmlstruct = new StructureAsCML(substituted);
	        buf.append(cmlstruct.toString());
			} catch (ClassNotFoundException | SQLException | CDKException | IOException e) {
				buf.append(e.toString());
			}
	}

	private static void opticalSymmetryCommands() {
		System.out.println(opticalTestS + " SymmetryElement NancyString");
		System.out.println("Test type: " + singleTest + " or " + fullTest);
		System.out.println("NancyString: the molecule name as nancy string");
		System.out.println("Single test:");
		System.out.println("     SymmetryElement: The name of the optical symmetry element");

	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:167)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:152)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-02-11 12:02:54.299
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:167)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:152)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-02-11 12:02:54.299
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:167)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:152)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-02-11 12:03:01.130
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package thermo.build.test;

import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;

import org.openscience.cdk.exception.CDKException;
import org.openscience.cdk.interfaces.IAtomContainer;

import thermo.data.benson.SetOfBensonThermodynamicBase;
import thermo.data.benson.DB.ThermoSQLConnection;
import thermo.data.structure.linearform.NancyLinearFormToMolecule;
import thermo.data.structure.structure.SetOfMetaAtomsForSubstitution;
import thermo.data.structure.structure.StructureAsCML;
import thermo.data.structure.structure.DB.SQLMetaAtomDefinitionFromMetaAtomInfo;
import thermo.exception.ThermodynamicException;

public class CorrectionElementTests {
	static ThermoSQLConnection connection;
	static String type;
	static String specificTest = "";
	static String nancyS = "";
	static StringBuffer buf;
	static ArrayList<String> arguments;
	static boolean foundCommand;
	static IAtomContainer molecule;

	static String singleTest = "Single";
	static String fullTest = "Full";
	static String listelements = "List";
	static String elementS = "Element";
	static String opticalTestS = "OpticalSymmetryTest";
	static String bensonAtomTestS = "BensonAtomTest";

	/**
	 * @param args the command line arguments
	 */
	public static boolean executeCommand(String[] args) {
		if (setup(args)) {
			if (type.equalsIgnoreCase(opticalTestS)) {
				testOpticalSymmetry();
			} else if (type.equalsIgnoreCase(bensonAtomTestS)) {

			}
			System.out.println(buf.toString());
		}
		return foundCommand;
	}

	public static void commands() {
		System.out.println("Expecting the type of Tests:");
		System.out.println(opticalTestS + ":  Test an optical symmetry element(s)");
	}

	public static boolean setup(String[] args) {
		boolean success = true;
		if (args.length < 1) {
			foundCommand = false;
			success = false;
		} else {
			String type = args[0];
			if (type.equalsIgnoreCase(opticalTestS) || type.equalsIgnoreCase(bensonAtomTestS)) {
				if (args.length < 3) {
					opticalSymmetryCommands();
					success = false;
				} else {
					specificTest = args[1];
					nancyS = args[2];

					connection = new ThermoSQLConnection();
					connection.connect();

					IAtomContainer molecule = getMolecule();
					if (molecule != null) {
						buf = new StringBuffer();

						arguments = new ArrayList<String>();
						for (int i = 3; i < args.length; i++) {
							arguments.add(args[i]);
						}
					} else {
						success = false;
					}
				}
			} else {
				foundCommand = false;
				success = false;
			}
		}
		return success;
	}

	public static IAtomContainer getMolecule() {
		NancyLinearFormToMolecule nancyFormToMolecule;
		IAtomContainer molecule = null;
		try {
			nancyFormToMolecule = new NancyLinearFormToMolecule(connection);
			molecule = nancyFormToMolecule.convert(nancyS);

			buf.append("Molecule  -----------------------------------------------\n");
			StructureAsCML cmlstruct = new StructureAsCML(molecule);
			buf.append(cmlstruct.toString() + "\n");
			buf.append("Molecule  -----------------------------------------------\n");
		} catch (SQLException e) {
			System.out.println("Invalid Nancy Linear Form: " + nancyS);
		} catch (CDKException e) {
			System.out.println("Invalid Nancy Linear Form: " + nancyS);
		}
		return molecule;
	}

	private static void testOpticalSymmetry() {
		boolean success = true;
		SetOfBensonThermodynamicBase thermoset = new SetOfBensonThermodynamicBase();
		try {
			ThermoSQLConnection connection = new ThermoSQLConnection();
			connection.connect();

			if (specificTest.equalsIgnoreCase(singleTest)) {
				if (arguments.size() < 1) {
					System.out.println("Expecting optical symmetry name");
					opticalSymmetryCommands();
				} else {
					thermoset = TestOpticalSymmetryElement.performSingleTest(buf, molecule, connection,
							arguments.get(0));
				}
			} else if (specificTest.equalsIgnoreCase(fullTest)) {
				thermoset = TestOpticalSymmetryElement.performWithFullSet(buf, molecule, connection);
			}
		} catch (SQLException e) {
			buf.append(e.toString());
			success = false;
		} catch (CDKException e) {
			buf.append(e.toString());
			success = false;
		} catch (ThermodynamicException e) {
			buf.append(e.toString());
			success = false;
		}
		if (success) {
			if (thermoset.size() > 0) {
				buf.append("======================================================\n");
				buf.append(thermoset.toString());
				buf.append("======================================================\n");
			} else {
				buf.append("No symmetry corrections computed\n");
			}
		}
	}

	private static void metaAtomTest() {
		boolean success = true;
		String bensonAtomType = "BensonAtom";
		SetOfMetaAtomsForSubstitution metaAtomSubstitutions;
		SQLMetaAtomDefinitionFromMetaAtomInfo sqlMetaAtom;
		sqlMetaAtom = new SQLMetaAtomDefinitionFromMetaAtomInfo(connection);
			metaAtomSubstitutions = sqlMetaAtom.createSubstitutionSets(bensonAtomType);
		
		if(specificTest.equalsIgnoreCase(singleTest)) {
	        IAtomContainer substituted = metaAtomSubstitutions.substitute(molecule);
	        buf.append("computeThermodynamicsForMolecule  after meta-atom substitutions\n");
	        StructureAsCML cmlstruct = new StructureAsCML(substituted);
	        buf.append(cmlstruct.toString());
			} catch (ClassNotFoundException | SQLException | CDKException | IOException e) {
				buf.append(e.toString());
			}
	}

	private static void opticalSymmetryCommands() {
		System.out.println(opticalTestS + " SymmetryElement NancyString");
		System.out.println("Test type: " + singleTest + " or " + fullTest);
		System.out.println("NancyString: the molecule name as nancy string");
		System.out.println("Single test:");
		System.out.println("     SymmetryElement: The name of the optical symmetry element");

	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:167)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:152)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-02-11 12:03:01.131
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:167)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:152)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-02-11 12:03:01.132
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:167)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:152)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-02-11 12:03:09.909
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package thermo.build.test;

import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;

import org.openscience.cdk.exception.CDKException;
import org.openscience.cdk.interfaces.IAtomContainer;

import thermo.data.benson.SetOfBensonThermodynamicBase;
import thermo.data.benson.DB.ThermoSQLConnection;
import thermo.data.structure.linearform.NancyLinearFormToMolecule;
import thermo.data.structure.structure.SetOfMetaAtomsForSubstitution;
import thermo.data.structure.structure.StructureAsCML;
import thermo.data.structure.structure.DB.SQLMetaAtomDefinitionFromMetaAtomInfo;
import thermo.exception.ThermodynamicException;

public class CorrectionElementTests {
	static ThermoSQLConnection connection;
	static String type;
	static String specificTest = "";
	static String nancyS = "";
	static StringBuffer buf;
	static ArrayList<String> arguments;
	static boolean foundCommand;
	static IAtomContainer molecule;

	static String singleTest = "Single";
	static String fullTest = "Full";
	static String listelements = "List";
	static String elementS = "Element";
	static String opticalTestS = "OpticalSymmetryTest";
	static String bensonAtomTestS = "BensonAtomTest";

	/**
	 * @param args the command line arguments
	 */
	public static boolean executeCommand(String[] args) {
		if (setup(args)) {
			if (type.equalsIgnoreCase(opticalTestS)) {
				testOpticalSymmetry();
			} else if (type.equalsIgnoreCase(bensonAtomTestS)) {

			}
			System.out.println(buf.toString());
		}
		return foundCommand;
	}

	public static void commands() {
		System.out.println("Expecting the type of Tests:");
		System.out.println(opticalTestS + ":  Test an optical symmetry element(s)");
	}

	public static boolean setup(String[] args) {
		boolean success = true;
		if (args.length < 1) {
			foundCommand = false;
			success = false;
		} else {
			String type = args[0];
			if (type.equalsIgnoreCase(opticalTestS) || type.equalsIgnoreCase(bensonAtomTestS)) {
				if (args.length < 3) {
					opticalSymmetryCommands();
					success = false;
				} else {
					specificTest = args[1];
					nancyS = args[2];

					connection = new ThermoSQLConnection();
					connection.connect();

					IAtomContainer molecule = getMolecule();
					if (molecule != null) {
						buf = new StringBuffer();

						arguments = new ArrayList<String>();
						for (int i = 3; i < args.length; i++) {
							arguments.add(args[i]);
						}
					} else {
						success = false;
					}
				}
			} else {
				foundCommand = false;
				success = false;
			}
		}
		return success;
	}

	public static IAtomContainer getMolecule() {
		NancyLinearFormToMolecule nancyFormToMolecule;
		IAtomContainer molecule = null;
		try {
			nancyFormToMolecule = new NancyLinearFormToMolecule(connection);
			molecule = nancyFormToMolecule.convert(nancyS);

			buf.append("Molecule  -----------------------------------------------\n");
			StructureAsCML cmlstruct = new StructureAsCML(molecule);
			buf.append(cmlstruct.toString() + "\n");
			buf.append("Molecule  -----------------------------------------------\n");
		} catch (SQLException e) {
			System.out.println("Invalid Nancy Linear Form: " + nancyS);
		} catch (CDKException e) {
			System.out.println("Invalid Nancy Linear Form: " + nancyS);
		}
		return molecule;
	}

	private static void testOpticalSymmetry() {
		boolean success = true;
		SetOfBensonThermodynamicBase thermoset = new SetOfBensonThermodynamicBase();
		try {
			ThermoSQLConnection connection = new ThermoSQLConnection();
			connection.connect();

			if (specificTest.equalsIgnoreCase(singleTest)) {
				if (arguments.size() < 1) {
					System.out.println("Expecting optical symmetry name");
					opticalSymmetryCommands();
				} else {
					thermoset = TestOpticalSymmetryElement.performSingleTest(buf, molecule, connection,
							arguments.get(0));
				}
			} else if (specificTest.equalsIgnoreCase(fullTest)) {
				thermoset = TestOpticalSymmetryElement.performWithFullSet(buf, molecule, connection);
			}
		} catch (SQLException e) {
			buf.append(e.toString());
			success = false;
		} catch (CDKException e) {
			buf.append(e.toString());
			success = false;
		} catch (ThermodynamicException e) {
			buf.append(e.toString());
			success = false;
		}
		if (success) {
			if (thermoset.size() > 0) {
				buf.append("======================================================\n");
				buf.append(thermoset.toString());
				buf.append("======================================================\n");
			} else {
				buf.append("No symmetry corrections computed\n");
			}
		}
	}

	private static void metaAtomTest() {
		boolean success = true;
		String bensonAtomType = "BensonAtom";
		SetOfMetaAtomsForSubstitution metaAtomSubstitutions;
		SQLMetaAtomDefinitionFromMetaAtomInfo sqlMetaAtom;
		sqlMetaAtom = new SQLMetaAtomDefinitionFromMetaAtomInfo(connection);
			metaAtomSubstitutions = sqlMetaAtom.createSubstitutionSets(bensonAtomType);
		
		if(specificTest.equalsIgnoreCase(singleTest)) {
	        IAtomContainer substituted = metaAtomSubstitutions.substitute(molecule);
	        buf.append("computeThermodynamicsForMolecule  after meta-atom substitutions\n");
	        StructureAsCML cmlstruct = new StructureAsCML(substituted);
	        buf.append(cmlstruct.toString());
			} catch (ClassNotFoundException | SQLException | CDKException | IOException e) {
				buf.append(e.toString());
			}
	}

	private static void opticalSymmetryCommands() {
		System.out.println(opticalTestS + " SymmetryElement NancyString");
		System.out.println("Test type: " + singleTest + " or " + fullTest);
		System.out.println("NancyString: the molecule name as nancy string");
		System.out.println("Single test:");
		System.out.println("     SymmetryElement: The name of the optical symmetry element");

	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:167)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:152)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-02-11 12:03:09.910
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:167)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:152)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-02-11 12:03:09.911
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:167)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:152)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-02-11 12:03:11.877
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package thermo.build.test;

import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;

import org.openscience.cdk.exception.CDKException;
import org.openscience.cdk.interfaces.IAtomContainer;

import thermo.data.benson.SetOfBensonThermodynamicBase;
import thermo.data.benson.DB.ThermoSQLConnection;
import thermo.data.structure.linearform.NancyLinearFormToMolecule;
import thermo.data.structure.structure.SetOfMetaAtomsForSubstitution;
import thermo.data.structure.structure.StructureAsCML;
import thermo.data.structure.structure.DB.SQLMetaAtomDefinitionFromMetaAtomInfo;
import thermo.exception.ThermodynamicException;

public class CorrectionElementTests {
	static ThermoSQLConnection connection;
	static String type;
	static String specificTest = "";
	static String nancyS = "";
	static StringBuffer buf;
	static ArrayList<String> arguments;
	static boolean foundCommand;
	static IAtomContainer molecule;

	static String singleTest = "Single";
	static String fullTest = "Full";
	static String listelements = "List";
	static String elementS = "Element";
	static String opticalTestS = "OpticalSymmetryTest";
	static String bensonAtomTestS = "BensonAtomTest";

	/**
	 * @param args the command line arguments
	 */
	public static boolean executeCommand(String[] args) {
		if (setup(args)) {
			if (type.equalsIgnoreCase(opticalTestS)) {
				testOpticalSymmetry();
			} else if (type.equalsIgnoreCase(bensonAtomTestS)) {

			}
			System.out.println(buf.toString());
		}
		return foundCommand;
	}

	public static void commands() {
		System.out.println("Expecting the type of Tests:");
		System.out.println(opticalTestS + ":  Test an optical symmetry element(s)");
	}

	public static boolean setup(String[] args) {
		boolean success = true;
		if (args.length < 1) {
			foundCommand = false;
			success = false;
		} else {
			String type = args[0];
			if (type.equalsIgnoreCase(opticalTestS) || type.equalsIgnoreCase(bensonAtomTestS)) {
				if (args.length < 3) {
					opticalSymmetryCommands();
					success = false;
				} else {
					specificTest = args[1];
					nancyS = args[2];

					connection = new ThermoSQLConnection();
					connection.connect();

					IAtomContainer molecule = getMolecule();
					if (molecule != null) {
						buf = new StringBuffer();

						arguments = new ArrayList<String>();
						for (int i = 3; i < args.length; i++) {
							arguments.add(args[i]);
						}
					} else {
						success = false;
					}
				}
			} else {
				foundCommand = false;
				success = false;
			}
		}
		return success;
	}

	public static IAtomContainer getMolecule() {
		NancyLinearFormToMolecule nancyFormToMolecule;
		IAtomContainer molecule = null;
		try {
			nancyFormToMolecule = new NancyLinearFormToMolecule(connection);
			molecule = nancyFormToMolecule.convert(nancyS);

			buf.append("Molecule  -----------------------------------------------\n");
			StructureAsCML cmlstruct = new StructureAsCML(molecule);
			buf.append(cmlstruct.toString() + "\n");
			buf.append("Molecule  -----------------------------------------------\n");
		} catch (SQLException e) {
			System.out.println("Invalid Nancy Linear Form: " + nancyS);
		} catch (CDKException e) {
			System.out.println("Invalid Nancy Linear Form: " + nancyS);
		}
		return molecule;
	}

	private static void testOpticalSymmetry() {
		boolean success = true;
		SetOfBensonThermodynamicBase thermoset = new SetOfBensonThermodynamicBase();
		try {
			ThermoSQLConnection connection = new ThermoSQLConnection();
			connection.connect();

			if (specificTest.equalsIgnoreCase(singleTest)) {
				if (arguments.size() < 1) {
					System.out.println("Expecting optical symmetry name");
					opticalSymmetryCommands();
				} else {
					thermoset = TestOpticalSymmetryElement.performSingleTest(buf, molecule, connection,
							arguments.get(0));
				}
			} else if (specificTest.equalsIgnoreCase(fullTest)) {
				thermoset = TestOpticalSymmetryElement.performWithFullSet(buf, molecule, connection);
			}
		} catch (SQLException e) {
			buf.append(e.toString());
			success = false;
		} catch (CDKException e) {
			buf.append(e.toString());
			success = false;
		} catch (ThermodynamicException e) {
			buf.append(e.toString());
			success = false;
		}
		if (success) {
			if (thermoset.size() > 0) {
				buf.append("======================================================\n");
				buf.append(thermoset.toString());
				buf.append("======================================================\n");
			} else {
				buf.append("No symmetry corrections computed\n");
			}
		}
	}

	private static void metaAtomTest() {
		boolean success = true;
		String bensonAtomType = "BensonAtom";
		SetOfMetaAtomsForSubstitution metaAtomSubstitutions;
		SQLMetaAtomDefinitionFromMetaAtomInfo sqlMetaAtom;
		sqlMetaAtom = new SQLMetaAtomDefinitionFromMetaAtomInfo(connection);
			metaAtomSubstitutions = sqlMetaAtom.createSubstitutionSets(bensonAtomType);
		
		if(specificTest.equalsIgnoreCase(singleTest)) {
	        IAtomContainer substituted = metaAtomSubstitutions.substitute(molecule);
	        buf.append("computeThermodynamicsForMolecule  after meta-atom substitutions\n");
	        StructureAsCML cmlstruct = new StructureAsCML(substituted);
	        buf.append(cmlstruct.toString());
			} catch (ClassNotFoundException | SQLException | CDKException | IOException e) {
				buf.append(e.toString());
			}
	}

	private static void opticalSymmetryCommands() {
		System.out.println(opticalTestS + " SymmetryElement NancyString");
		System.out.println("Test type: " + singleTest + " or " + fullTest);
		System.out.println("NancyString: the molecule name as nancy string");
		System.out.println("Single test:");
		System.out.println("     SymmetryElement: The name of the optical symmetry element");

	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:449)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:268)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2021-02-11 12:03:11.878
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:449)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:268)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2021-02-11 12:03:11.879
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:449)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:268)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2021-02-11 12:03:12.133
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package thermo.build.test;

import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;

import org.openscience.cdk.exception.CDKException;
import org.openscience.cdk.interfaces.IAtomContainer;

import thermo.data.benson.SetOfBensonThermodynamicBase;
import thermo.data.benson.DB.ThermoSQLConnection;
import thermo.data.structure.linearform.NancyLinearFormToMolecule;
import thermo.data.structure.structure.SetOfMetaAtomsForSubstitution;
import thermo.data.structure.structure.StructureAsCML;
import thermo.data.structure.structure.DB.SQLMetaAtomDefinitionFromMetaAtomInfo;
import thermo.exception.ThermodynamicException;

public class CorrectionElementTests {
	static ThermoSQLConnection connection;
	static String type;
	static String specificTest = "";
	static String nancyS = "";
	static StringBuffer buf;
	static ArrayList<String> arguments;
	static boolean foundCommand;
	static IAtomContainer molecule;

	static String singleTest = "Single";
	static String fullTest = "Full";
	static String listelements = "List";
	static String elementS = "Element";
	static String opticalTestS = "OpticalSymmetryTest";
	static String bensonAtomTestS = "BensonAtomTest";

	/**
	 * @param args the command line arguments
	 */
	public static boolean executeCommand(String[] args) {
		if (setup(args)) {
			if (type.equalsIgnoreCase(opticalTestS)) {
				testOpticalSymmetry();
			} else if (type.equalsIgnoreCase(bensonAtomTestS)) {

			}
			System.out.println(buf.toString());
		}
		return foundCommand;
	}

	public static void commands() {
		System.out.println("Expecting the type of Tests:");
		System.out.println(opticalTestS + ":  Test an optical symmetry element(s)");
	}

	public static boolean setup(String[] args) {
		boolean success = true;
		if (args.length < 1) {
			foundCommand = false;
			success = false;
		} else {
			String type = args[0];
			if (type.equalsIgnoreCase(opticalTestS) || type.equalsIgnoreCase(bensonAtomTestS)) {
				if (args.length < 3) {
					opticalSymmetryCommands();
					success = false;
				} else {
					specificTest = args[1];
					nancyS = args[2];

					connection = new ThermoSQLConnection();
					connection.connect();

					IAtomContainer molecule = getMolecule();
					if (molecule != null) {
						buf = new StringBuffer();

						arguments = new ArrayList<String>();
						for (int i = 3; i < args.length; i++) {
							arguments.add(args[i]);
						}
					} else {
						success = false;
					}
				}
			} else {
				foundCommand = false;
				success = false;
			}
		}
		return success;
	}

	public static IAtomContainer getMolecule() {
		NancyLinearFormToMolecule nancyFormToMolecule;
		IAtomContainer molecule = null;
		try {
			nancyFormToMolecule = new NancyLinearFormToMolecule(connection);
			molecule = nancyFormToMolecule.convert(nancyS);

			buf.append("Molecule  -----------------------------------------------\n");
			StructureAsCML cmlstruct = new StructureAsCML(molecule);
			buf.append(cmlstruct.toString() + "\n");
			buf.append("Molecule  -----------------------------------------------\n");
		} catch (SQLException e) {
			System.out.println("Invalid Nancy Linear Form: " + nancyS);
		} catch (CDKException e) {
			System.out.println("Invalid Nancy Linear Form: " + nancyS);
		}
		return molecule;
	}

	private static void testOpticalSymmetry() {
		boolean success = true;
		SetOfBensonThermodynamicBase thermoset = new SetOfBensonThermodynamicBase();
		try {
			ThermoSQLConnection connection = new ThermoSQLConnection();
			connection.connect();

			if (specificTest.equalsIgnoreCase(singleTest)) {
				if (arguments.size() < 1) {
					System.out.println("Expecting optical symmetry name");
					opticalSymmetryCommands();
				} else {
					thermoset = TestOpticalSymmetryElement.performSingleTest(buf, molecule, connection,
							arguments.get(0));
				}
			} else if (specificTest.equalsIgnoreCase(fullTest)) {
				thermoset = TestOpticalSymmetryElement.performWithFullSet(buf, molecule, connection);
			}
		} catch (SQLException e) {
			buf.append(e.toString());
			success = false;
		} catch (CDKException e) {
			buf.append(e.toString());
			success = false;
		} catch (ThermodynamicException e) {
			buf.append(e.toString());
			success = false;
		}
		if (success) {
			if (thermoset.size() > 0) {
				buf.append("======================================================\n");
				buf.append(thermoset.toString());
				buf.append("======================================================\n");
			} else {
				buf.append("No symmetry corrections computed\n");
			}
		}
	}

	private static void metaAtomTest() {
		boolean success = true;
		String bensonAtomType = "BensonAtom";
		SetOfMetaAtomsForSubstitution metaAtomSubstitutions;
		SQLMetaAtomDefinitionFromMetaAtomInfo sqlMetaAtom;
		sqlMetaAtom = new SQLMetaAtomDefinitionFromMetaAtomInfo(connection);
			metaAtomSubstitutions = sqlMetaAtom.createSubstitutionSets(bensonAtomType);
		
		if(specificTest.equalsIgnoreCase(singleTest)) {
	        IAtomContainer substituted = metaAtomSubstitutions.substitute(molecule);
	        buf.append("computeThermodynamicsForMolecule  after meta-atom substitutions\n");
	        StructureAsCML cmlstruct = new StructureAsCML(substituted);
	        buf.append(cmlstruct.toString());
			} catch (ClassNotFoundException | SQLException | CDKException | IOException e) {
				buf.append(e.toString());
			}
	}

	private static void opticalSymmetryCommands() {
		System.out.println(opticalTestS + " SymmetryElement NancyString");
		System.out.println("Test type: " + singleTest + " or " + fullTest);
		System.out.println("NancyString: the molecule name as nancy string");
		System.out.println("Single test:");
		System.out.println("     SymmetryElement: The name of the optical symmetry element");

	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:167)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:152)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-02-11 12:03:12.134
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:167)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:152)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-02-11 12:03:12.136
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:167)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:152)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-02-11 12:03:13.028
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package thermo.build.test;

import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;

import org.openscience.cdk.exception.CDKException;
import org.openscience.cdk.interfaces.IAtomContainer;

import thermo.data.benson.SetOfBensonThermodynamicBase;
import thermo.data.benson.DB.ThermoSQLConnection;
import thermo.data.structure.linearform.NancyLinearFormToMolecule;
import thermo.data.structure.structure.SetOfMetaAtomsForSubstitution;
import thermo.data.structure.structure.StructureAsCML;
import thermo.data.structure.structure.DB.SQLMetaAtomDefinitionFromMetaAtomInfo;
import thermo.exception.ThermodynamicException;

public class CorrectionElementTests {
	static ThermoSQLConnection connection;
	static String type;
	static String specificTest = "";
	static String nancyS = "";
	static StringBuffer buf;
	static ArrayList<String> arguments;
	static boolean foundCommand;
	static IAtomContainer molecule;

	static String singleTest = "Single";
	static String fullTest = "Full";
	static String listelements = "List";
	static String elementS = "Element";
	static String opticalTestS = "OpticalSymmetryTest";
	static String bensonAtomTestS = "BensonAtomTest";

	/**
	 * @param args the command line arguments
	 */
	public static boolean executeCommand(String[] args) {
		if (setup(args)) {
			if (type.equalsIgnoreCase(opticalTestS)) {
				testOpticalSymmetry();
			} else if (type.equalsIgnoreCase(bensonAtomTestS)) {

			}
			System.out.println(buf.toString());
		}
		return foundCommand;
	}

	public static void commands() {
		System.out.println("Expecting the type of Tests:");
		System.out.println(opticalTestS + ":  Test an optical symmetry element(s)");
	}

	public static boolean setup(String[] args) {
		boolean success = true;
		if (args.length < 1) {
			foundCommand = false;
			success = false;
		} else {
			String type = args[0];
			if (type.equalsIgnoreCase(opticalTestS) || type.equalsIgnoreCase(bensonAtomTestS)) {
				if (args.length < 3) {
					opticalSymmetryCommands();
					success = false;
				} else {
					specificTest = args[1];
					nancyS = args[2];

					connection = new ThermoSQLConnection();
					connection.connect();

					IAtomContainer molecule = getMolecule();
					if (molecule != null) {
						buf = new StringBuffer();

						arguments = new ArrayList<String>();
						for (int i = 3; i < args.length; i++) {
							arguments.add(args[i]);
						}
					} else {
						success = false;
					}
				}
			} else {
				foundCommand = false;
				success = false;
			}
		}
		return success;
	}

	public static IAtomContainer getMolecule() {
		NancyLinearFormToMolecule nancyFormToMolecule;
		IAtomContainer molecule = null;
		try {
			nancyFormToMolecule = new NancyLinearFormToMolecule(connection);
			molecule = nancyFormToMolecule.convert(nancyS);

			buf.append("Molecule  -----------------------------------------------\n");
			StructureAsCML cmlstruct = new StructureAsCML(molecule);
			buf.append(cmlstruct.toString() + "\n");
			buf.append("Molecule  -----------------------------------------------\n");
		} catch (SQLException e) {
			System.out.println("Invalid Nancy Linear Form: " + nancyS);
		} catch (CDKException e) {
			System.out.println("Invalid Nancy Linear Form: " + nancyS);
		}
		return molecule;
	}

	private static void testOpticalSymmetry() {
		boolean success = true;
		SetOfBensonThermodynamicBase thermoset = new SetOfBensonThermodynamicBase();
		try {
			ThermoSQLConnection connection = new ThermoSQLConnection();
			connection.connect();

			if (specificTest.equalsIgnoreCase(singleTest)) {
				if (arguments.size() < 1) {
					System.out.println("Expecting optical symmetry name");
					opticalSymmetryCommands();
				} else {
					thermoset = TestOpticalSymmetryElement.performSingleTest(buf, molecule, connection,
							arguments.get(0));
				}
			} else if (specificTest.equalsIgnoreCase(fullTest)) {
				thermoset = TestOpticalSymmetryElement.performWithFullSet(buf, molecule, connection);
			}
		} catch (SQLException e) {
			buf.append(e.toString());
			success = false;
		} catch (CDKException e) {
			buf.append(e.toString());
			success = false;
		} catch (ThermodynamicException e) {
			buf.append(e.toString());
			success = false;
		}
		if (success) {
			if (thermoset.size() > 0) {
				buf.append("======================================================\n");
				buf.append(thermoset.toString());
				buf.append("======================================================\n");
			} else {
				buf.append("No symmetry corrections computed\n");
			}
		}
	}

	private static void metaAtomTest() {
		boolean success = true;
		String bensonAtomType = "BensonAtom";
		SetOfMetaAtomsForSubstitution metaAtomSubstitutions;
		SQLMetaAtomDefinitionFromMetaAtomInfo sqlMetaAtom;
		sqlMetaAtom = new SQLMetaAtomDefinitionFromMetaAtomInfo(connection);
			metaAtomSubstitutions = sqlMetaAtom.createSubstitutionSets(bensonAtomType);
		
		if(specificTest.equalsIgnoreCase(singleTest)) {
	        IAtomContainer substituted = metaAtomSubstitutions.substitute(molecule);
	        buf.append("computeThermodynamicsForMolecule  after meta-atom substitutions\n");
	        StructureAsCML cmlstruct = new StructureAsCML(substituted);
	        buf.append(cmlstruct.toString());
			} catch (ClassNotFoundException | SQLException | CDKException | IOException e) {
				buf.append(e.toString());
			}
	}

	private static void opticalSymmetryCommands() {
		System.out.println(opticalTestS + " SymmetryElement NancyString");
		System.out.println("Test type: " + singleTest + " or " + fullTest);
		System.out.println("NancyString: the molecule name as nancy string");
		System.out.println("Single test:");
		System.out.println("     SymmetryElement: The name of the optical symmetry element");

	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:167)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:152)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-02-11 12:03:13.029
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:167)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:152)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-02-11 12:03:13.030
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:167)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:152)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-02-11 12:03:20.349
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package thermo.build.test;

import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;

import org.openscience.cdk.exception.CDKException;
import org.openscience.cdk.interfaces.IAtomContainer;

import thermo.data.benson.SetOfBensonThermodynamicBase;
import thermo.data.benson.DB.ThermoSQLConnection;
import thermo.data.structure.linearform.NancyLinearFormToMolecule;
import thermo.data.structure.structure.SetOfMetaAtomsForSubstitution;
import thermo.data.structure.structure.StructureAsCML;
import thermo.data.structure.structure.DB.SQLMetaAtomDefinitionFromMetaAtomInfo;
import thermo.exception.ThermodynamicException;

public class CorrectionElementTests {
	static ThermoSQLConnection connection;
	static String type;
	static String specificTest = "";
	static String nancyS = "";
	static StringBuffer buf;
	static ArrayList<String> arguments;
	static boolean foundCommand;
	static IAtomContainer molecule;

	static String singleTest = "Single";
	static String fullTest = "Full";
	static String listelements = "List";
	static String elementS = "Element";
	static String opticalTestS = "OpticalSymmetryTest";
	static String bensonAtomTestS = "BensonAtomTest";

	/**
	 * @param args the command line arguments
	 */
	public static boolean executeCommand(String[] args) {
		if (setup(args)) {
			if (type.equalsIgnoreCase(opticalTestS)) {
				testOpticalSymmetry();
			} else if (type.equalsIgnoreCase(bensonAtomTestS)) {

			}
			System.out.println(buf.toString());
		}
		return foundCommand;
	}

	public static void commands() {
		System.out.println("Expecting the type of Tests:");
		System.out.println(opticalTestS + ":  Test an optical symmetry element(s)");
	}

	public static boolean setup(String[] args) {
		boolean success = true;
		if (args.length < 1) {
			foundCommand = false;
			success = false;
		} else {
			String type = args[0];
			if (type.equalsIgnoreCase(opticalTestS) || type.equalsIgnoreCase(bensonAtomTestS)) {
				if (args.length < 3) {
					opticalSymmetryCommands();
					success = false;
				} else {
					specificTest = args[1];
					nancyS = args[2];

					connection = new ThermoSQLConnection();
					connection.connect();

					IAtomContainer molecule = getMolecule();
					if (molecule != null) {
						buf = new StringBuffer();

						arguments = new ArrayList<String>();
						for (int i = 3; i < args.length; i++) {
							arguments.add(args[i]);
						}
					} else {
						success = false;
					}
				}
			} else {
				foundCommand = false;
				success = false;
			}
		}
		return success;
	}

	public static IAtomContainer getMolecule() {
		NancyLinearFormToMolecule nancyFormToMolecule;
		IAtomContainer molecule = null;
		try {
			nancyFormToMolecule = new NancyLinearFormToMolecule(connection);
			molecule = nancyFormToMolecule.convert(nancyS);

			buf.append("Molecule  -----------------------------------------------\n");
			StructureAsCML cmlstruct = new StructureAsCML(molecule);
			buf.append(cmlstruct.toString() + "\n");
			buf.append("Molecule  -----------------------------------------------\n");
		} catch (SQLException e) {
			System.out.println("Invalid Nancy Linear Form: " + nancyS);
		} catch (CDKException e) {
			System.out.println("Invalid Nancy Linear Form: " + nancyS);
		}
		return molecule;
	}

	private static void testOpticalSymmetry() {
		boolean success = true;
		SetOfBensonThermodynamicBase thermoset = new SetOfBensonThermodynamicBase();
		try {
			ThermoSQLConnection connection = new ThermoSQLConnection();
			connection.connect();

			if (specificTest.equalsIgnoreCase(singleTest)) {
				if (arguments.size() < 1) {
					System.out.println("Expecting optical symmetry name");
					opticalSymmetryCommands();
				} else {
					thermoset = TestOpticalSymmetryElement.performSingleTest(buf, molecule, connection,
							arguments.get(0));
				}
			} else if (specificTest.equalsIgnoreCase(fullTest)) {
				thermoset = TestOpticalSymmetryElement.performWithFullSet(buf, molecule, connection);
			}
		} catch (SQLException e) {
			buf.append(e.toString());
			success = false;
		} catch (CDKException e) {
			buf.append(e.toString());
			success = false;
		} catch (ThermodynamicException e) {
			buf.append(e.toString());
			success = false;
		}
		if (success) {
			if (thermoset.size() > 0) {
				buf.append("======================================================\n");
				buf.append(thermoset.toString());
				buf.append("======================================================\n");
			} else {
				buf.append("No symmetry corrections computed\n");
			}
		}
	}

	private static void metaAtomTest() {
		boolean success = true;
		String bensonAtomType = "BensonAtom";
		SetOfMetaAtomsForSubstitution metaAtomSubstitutions;
		SQLMetaAtomDefinitionFromMetaAtomInfo sqlMetaAtom;
		sqlMetaAtom = new SQLMetaAtomDefinitionFromMetaAtomInfo(connection);
			metaAtomSubstitutions = sqlMetaAtom.createSubstitutionSets(bensonAtomType);
		
		if(specificTest.equalsIgnoreCase(singleTest)) {
	        IAtomContainer substituted = metaAtomSubstitutions.substitute(molecule);
	        buf.append("computeThermodynamicsForMolecule  after meta-atom substitutions\n");
	        StructureAsCML cmlstruct = new StructureAsCML(substituted);
	        buf.append(cmlstruct.toString());
			} catch (ClassNotFoundException | SQLException | CDKException | IOException e) {
				buf.append(e.toString());
			}
	}

	private static void opticalSymmetryCommands() {
		System.out.println(opticalTestS + " SymmetryElement NancyString");
		System.out.println("Test type: " + singleTest + " or " + fullTest);
		System.out.println("NancyString: the molecule name as nancy string");
		System.out.println("Single test:");
		System.out.println("     SymmetryElement: The name of the optical symmetry element");

	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-02-11 12:03:20.350
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-02-11 12:03:20.350
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2021-02-11 12:03:25.967
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package thermo.build.test;

import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;

import org.openscience.cdk.exception.CDKException;
import org.openscience.cdk.interfaces.IAtomContainer;

import thermo.data.benson.SetOfBensonThermodynamicBase;
import thermo.data.benson.DB.ThermoSQLConnection;
import thermo.data.structure.linearform.NancyLinearFormToMolecule;
import thermo.data.structure.structure.SetOfMetaAtomsForSubstitution;
import thermo.data.structure.structure.StructureAsCML;
import thermo.data.structure.structure.DB.SQLMetaAtomDefinitionFromMetaAtomInfo;
import thermo.exception.ThermodynamicException;

public class CorrectionElementTests {
	static ThermoSQLConnection connection;
	static String type;
	static String specificTest = "";
	static String nancyS = "";
	static StringBuffer buf;
	static ArrayList<String> arguments;
	static boolean foundCommand;
	static IAtomContainer molecule;

	static String singleTest = "Single";
	static String fullTest = "Full";
	static String listelements = "List";
	static String elementS = "Element";
	static String opticalTestS = "OpticalSymmetryTest";
	static String bensonAtomTestS = "BensonAtomTest";

	/**
	 * @param args the command line arguments
	 */
	public static boolean executeCommand(String[] args) {
		if (setup(args)) {
			if (type.equalsIgnoreCase(opticalTestS)) {
				testOpticalSymmetry();
			} else if (type.equalsIgnoreCase(bensonAtomTestS)) {

			}
			System.out.println(buf.toString());
		}
		return foundCommand;
	}

	public static void commands() {
		System.out.println("Expecting the type of Tests:");
		System.out.println(opticalTestS + ":  Test an optical symmetry element(s)");
	}

	public static boolean setup(String[] args) {
		boolean success = true;
		if (args.length < 1) {
			foundCommand = false;
			success = false;
		} else {
			String type = args[0];
			if (type.equalsIgnoreCase(opticalTestS) || type.equalsIgnoreCase(bensonAtomTestS)) {
				if (args.length < 3) {
					opticalSymmetryCommands();
					success = false;
				} else {
					specificTest = args[1];
					nancyS = args[2];

					connection = new ThermoSQLConnection();
					connection.connect();

					IAtomContainer molecule = getMolecule();
					if (molecule != null) {
						buf = new StringBuffer();

						arguments = new ArrayList<String>();
						for (int i = 3; i < args.length; i++) {
							arguments.add(args[i]);
						}
					} else {
						success = false;
					}
				}
			} else {
				foundCommand = false;
				success = false;
			}
		}
		return success;
	}

	public static IAtomContainer getMolecule() {
		NancyLinearFormToMolecule nancyFormToMolecule;
		IAtomContainer molecule = null;
		try {
			nancyFormToMolecule = new NancyLinearFormToMolecule(connection);
			molecule = nancyFormToMolecule.convert(nancyS);

			buf.append("Molecule  -----------------------------------------------\n");
			StructureAsCML cmlstruct = new StructureAsCML(molecule);
			buf.append(cmlstruct.toString() + "\n");
			buf.append("Molecule  -----------------------------------------------\n");
		} catch (SQLException e) {
			System.out.println("Invalid Nancy Linear Form: " + nancyS);
		} catch (CDKException e) {
			System.out.println("Invalid Nancy Linear Form: " + nancyS);
		}
		return molecule;
	}

	private static void testOpticalSymmetry() {
		boolean success = true;
		SetOfBensonThermodynamicBase thermoset = new SetOfBensonThermodynamicBase();
		try {
			ThermoSQLConnection connection = new ThermoSQLConnection();
			connection.connect();

			if (specificTest.equalsIgnoreCase(singleTest)) {
				if (arguments.size() < 1) {
					System.out.println("Expecting optical symmetry name");
					opticalSymmetryCommands();
				} else {
					thermoset = TestOpticalSymmetryElement.performSingleTest(buf, molecule, connection,
							arguments.get(0));
				}
			} else if (specificTest.equalsIgnoreCase(fullTest)) {
				thermoset = TestOpticalSymmetryElement.performWithFullSet(buf, molecule, connection);
			}
		} catch (SQLException e) {
			buf.append(e.toString());
			success = false;
		} catch (CDKException e) {
			buf.append(e.toString());
			success = false;
		} catch (ThermodynamicException e) {
			buf.append(e.toString());
			success = false;
		}
		if (success) {
			if (thermoset.size() > 0) {
				buf.append("======================================================\n");
				buf.append(thermoset.toString());
				buf.append("======================================================\n");
			} else {
				buf.append("No symmetry corrections computed\n");
			}
		}
	}

	private static void metaAtomTest() {
		boolean success = true;
		String bensonAtomType = "BensonAtom";
		SetOfMetaAtomsForSubstitution metaAtomSubstitutions;
		SQLMetaAtomDefinitionFromMetaAtomInfo sqlMetaAtom;
		sqlMetaAtom = new SQLMetaAtomDefinitionFromMetaAtomInfo(connection);
			metaAtomSubstitutions = sqlMetaAtom.createSubstitutionSets(bensonAtomType);
		
		if(specificTest.equalsIgnoreCase(singleTest)) {
			
	        IAtomContainer substituted = metaAtomSubstitutions.substitute(molecule);
	        buf.append("computeThermodynamicsForMolecule  after meta-atom substitutions\n");
	        StructureAsCML cmlstruct = new StructureAsCML(substituted);
	        buf.append(cmlstruct.toString());
			} catch (ClassNotFoundException | SQLException | CDKException | IOException e) {
				buf.append(e.toString());
			}
	}

	private static void opticalSymmetryCommands() {
		System.out.println(opticalTestS + " SymmetryElement NancyString");
		System.out.println("Test type: " + singleTest + " or " + fullTest);
		System.out.println("NancyString: the molecule name as nancy string");
		System.out.println("Single test:");
		System.out.println("     SymmetryElement: The name of the optical symmetry element");

	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:449)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:268)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2021-02-11 12:03:25.968
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:449)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:268)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2021-02-11 12:03:25.970
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:449)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:268)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2021-02-11 12:03:25.979
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package thermo.build.test;

import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;

import org.openscience.cdk.exception.CDKException;
import org.openscience.cdk.interfaces.IAtomContainer;

import thermo.data.benson.SetOfBensonThermodynamicBase;
import thermo.data.benson.DB.ThermoSQLConnection;
import thermo.data.structure.linearform.NancyLinearFormToMolecule;
import thermo.data.structure.structure.SetOfMetaAtomsForSubstitution;
import thermo.data.structure.structure.StructureAsCML;
import thermo.data.structure.structure.DB.SQLMetaAtomDefinitionFromMetaAtomInfo;
import thermo.exception.ThermodynamicException;

public class CorrectionElementTests {
	static ThermoSQLConnection connection;
	static String type;
	static String specificTest = "";
	static String nancyS = "";
	static StringBuffer buf;
	static ArrayList<String> arguments;
	static boolean foundCommand;
	static IAtomContainer molecule;

	static String singleTest = "Single";
	static String fullTest = "Full";
	static String listelements = "List";
	static String elementS = "Element";
	static String opticalTestS = "OpticalSymmetryTest";
	static String bensonAtomTestS = "BensonAtomTest";

	/**
	 * @param args the command line arguments
	 */
	public static boolean executeCommand(String[] args) {
		if (setup(args)) {
			if (type.equalsIgnoreCase(opticalTestS)) {
				testOpticalSymmetry();
			} else if (type.equalsIgnoreCase(bensonAtomTestS)) {

			}
			System.out.println(buf.toString());
		}
		return foundCommand;
	}

	public static void commands() {
		System.out.println("Expecting the type of Tests:");
		System.out.println(opticalTestS + ":  Test an optical symmetry element(s)");
	}

	public static boolean setup(String[] args) {
		boolean success = true;
		if (args.length < 1) {
			foundCommand = false;
			success = false;
		} else {
			String type = args[0];
			if (type.equalsIgnoreCase(opticalTestS) || type.equalsIgnoreCase(bensonAtomTestS)) {
				if (args.length < 3) {
					opticalSymmetryCommands();
					success = false;
				} else {
					specificTest = args[1];
					nancyS = args[2];

					connection = new ThermoSQLConnection();
					connection.connect();

					IAtomContainer molecule = getMolecule();
					if (molecule != null) {
						buf = new StringBuffer();

						arguments = new ArrayList<String>();
						for (int i = 3; i < args.length; i++) {
							arguments.add(args[i]);
						}
					} else {
						success = false;
					}
				}
			} else {
				foundCommand = false;
				success = false;
			}
		}
		return success;
	}

	public static IAtomContainer getMolecule() {
		NancyLinearFormToMolecule nancyFormToMolecule;
		IAtomContainer molecule = null;
		try {
			nancyFormToMolecule = new NancyLinearFormToMolecule(connection);
			molecule = nancyFormToMolecule.convert(nancyS);

			buf.append("Molecule  -----------------------------------------------\n");
			StructureAsCML cmlstruct = new StructureAsCML(molecule);
			buf.append(cmlstruct.toString() + "\n");
			buf.append("Molecule  -----------------------------------------------\n");
		} catch (SQLException e) {
			System.out.println("Invalid Nancy Linear Form: " + nancyS);
		} catch (CDKException e) {
			System.out.println("Invalid Nancy Linear Form: " + nancyS);
		}
		return molecule;
	}

	private static void testOpticalSymmetry() {
		boolean success = true;
		SetOfBensonThermodynamicBase thermoset = new SetOfBensonThermodynamicBase();
		try {
			ThermoSQLConnection connection = new ThermoSQLConnection();
			connection.connect();

			if (specificTest.equalsIgnoreCase(singleTest)) {
				if (arguments.size() < 1) {
					System.out.println("Expecting optical symmetry name");
					opticalSymmetryCommands();
				} else {
					thermoset = TestOpticalSymmetryElement.performSingleTest(buf, molecule, connection,
							arguments.get(0));
				}
			} else if (specificTest.equalsIgnoreCase(fullTest)) {
				thermoset = TestOpticalSymmetryElement.performWithFullSet(buf, molecule, connection);
			}
		} catch (SQLException e) {
			buf.append(e.toString());
			success = false;
		} catch (CDKException e) {
			buf.append(e.toString());
			success = false;
		} catch (ThermodynamicException e) {
			buf.append(e.toString());
			success = false;
		}
		if (success) {
			if (thermoset.size() > 0) {
				buf.append("======================================================\n");
				buf.append(thermoset.toString());
				buf.append("======================================================\n");
			} else {
				buf.append("No symmetry corrections computed\n");
			}
		}
	}

	private static void metaAtomTest() {
		boolean success = true;
		String bensonAtomType = "BensonAtom";
		SetOfMetaAtomsForSubstitution metaAtomSubstitutions;
		SQLMetaAtomDefinitionFromMetaAtomInfo sqlMetaAtom;
		sqlMetaAtom = new SQLMetaAtomDefinitionFromMetaAtomInfo(connection);
			metaAtomSubstitutions = sqlMetaAtom.createSubstitutionSets(bensonAtomType);
		
		if(specificTest.equalsIgnoreCase(singleTest)) {
			
	        IAtomContainer substituted = metaAtomSubstitutions.substitute(molecule);
	        buf.append("computeThermodynamicsForMolecule  after meta-atom substitutions\n");
	        StructureAsCML cmlstruct = new StructureAsCML(substituted);
	        buf.append(cmlstruct.toString());
			} catch (ClassNotFoundException | SQLException | CDKException | IOException e) {
				buf.append(e.toString());
			}
	}

	private static void opticalSymmetryCommands() {
		System.out.println(opticalTestS + " SymmetryElement NancyString");
		System.out.println("Test type: " + singleTest + " or " + fullTest);
		System.out.println("NancyString: the molecule name as nancy string");
		System.out.println("Single test:");
		System.out.println("     SymmetryElement: The name of the optical symmetry element");

	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:167)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:152)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-02-11 12:03:25.980
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:167)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:152)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-02-11 12:03:25.980
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:167)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:152)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-02-11 14:12:03.575
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package thermo.build.test;

import java.sql.SQLException;
import java.util.ArrayList;

import thermo.data.benson.DB.ThermoSQLConnection;

public class ExamineCorrectionElements {
	static ThermoSQLConnection connection;

	static String listelementsS = "List";
	static String elementS = "Element";
	static String opticalTestS = "OpticalSymmetry";

	/**
	 * @param args the command line arguments
	 * @throws SQLException
	 */
	public static boolean executeCommand(String[] args) {
		boolean foundCommand = true;
		try {
			if (args.length < 1) {
				foundCommand = false;
			} else {
				String typeS = args[0];
				if (typeS.equalsIgnoreCase(opticalTestS)) {

					if (args.length < 2) {
						System.out.println("Expecting:  " + args[0] + " command [other arguments]");
					} else {
						String commandS = args[1];

						connection = new ThermoSQLConnection();
						connection.connect();

						StringBuffer buf = new StringBuffer();
						boolean success = true;

						ArrayList<String> arguments = new ArrayList<String>();
						for (int i = 2; i < args.length; i++) {
							arguments.add(args[i]);
						}

						if (typeS.equalsIgnoreCase(opticalTestS)) {
							examineOpticalSymmetry(buf, commandS, arguments);
						} else {
							foundCommand = false;
						}
						if (foundCommand) {
							System.out.println(buf.toString());
						}

					}
				}
			}
		} catch (SQLException e) {
			System.out.println(e.toString());
		}
		return foundCommand;
	}
	
	private static boolean setup()

	private static void examineOpticalSymmetry(StringBuffer buf, String commandS, ArrayList<String> arguments)
			throws SQLException {
		boolean success = true;
		if (commandS.equalsIgnoreCase(listelementsS)) {
			TestOpticalSymmetryElement.listAllElements(buf, connection);
		} else if (commandS.equalsIgnoreCase(elementS)) {
			if (arguments.size() > 0) {
				String symname = arguments.get(0);
				TestOpticalSymmetryElement.getSymmetryDefinition(buf, symname, connection);
			} else {
				success = false;
				buf.append("Expecting an optical symmetry element name\n");
			}
		}
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:3105)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:738)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:449)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:268)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2021-02-11 14:12:03.578
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:3105)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:738)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:449)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:268)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2021-02-11 14:12:03.579
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:3105)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:738)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:449)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:268)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1141)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1318)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2021-02-11 15:43:37.661
!MESSAGE JavaBuilder handling CoreException
!STACK 1
org.eclipse.core.internal.resources.ResourceException(/JThermodynamicData/target/JThermodynamicData-1.0/WEB-INF/classes/thermo/build/test/CorrectionElementTests.class)[368]: java.lang.Exception: File not found: /Users/edwardblurock/git/JThermodynamics2/JThermodynamicData/target/JThermodynamicData-1.0/WEB-INF/classes/thermo/build/test/CorrectionElementTests.class.
	at org.eclipse.core.internal.resources.ResourceException.provideStackTrace(ResourceException.java:42)
	at org.eclipse.core.internal.resources.ResourceException.<init>(ResourceException.java:38)
	at org.eclipse.core.internal.localstore.FileSystemResourceManager.read(FileSystemResourceManager.java:835)
	at org.eclipse.core.internal.resources.File.getContents(File.java:275)
	at org.eclipse.jdt.internal.core.util.Util.getResourceContentsAsByteArray(Util.java:1157)
	at org.eclipse.jdt.internal.core.builder.IncrementalImageBuilder.writeClassFileCheck(IncrementalImageBuilder.java:942)
	at org.eclipse.jdt.internal.core.builder.IncrementalImageBuilder.writeClassFileContents(IncrementalImageBuilder.java:884)
	at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.writeClassFile(AbstractImageBuilder.java:879)
	at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.acceptResult(AbstractImageBuilder.java:203)
	at org.eclipse.jdt.internal.compiler.Compiler.processCompiledUnits(Compiler.java:615)
	at org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:475)
	at org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:426)
	at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile(AbstractImageBuilder.java:386)
	at org.eclipse.jdt.internal.core.builder.IncrementalImageBuilder.compile(IncrementalImageBuilder.java:371)
	at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile(AbstractImageBuilder.java:318)
	at org.eclipse.jdt.internal.core.builder.IncrementalImageBuilder.incrementalBuildLoop(IncrementalImageBuilder.java:190)
	at org.eclipse.jdt.internal.core.builder.IncrementalImageBuilder.build(IncrementalImageBuilder.java:147)
	at org.eclipse.jdt.internal.core.builder.JavaBuilder.buildDeltas(JavaBuilder.java:292)
	at org.eclipse.jdt.internal.core.builder.JavaBuilder.build(JavaBuilder.java:212)
	at org.eclipse.core.internal.events.BuildManager$2.run(BuildManager.java:832)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.core.internal.events.BuildManager._basicBuild(BuildManager.java:220)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:147)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:263)
	at org.eclipse.core.internal.events.BuildManager$1.run(BuildManager.java:316)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:319)
	at org.eclipse.core.internal.events.BuildManager.basicBuildLoop(BuildManager.java:371)
	at org.eclipse.core.internal.events.BuildManager.build(BuildManager.java:392)
	at org.eclipse.core.internal.events.AutoBuildJob.doBuild(AutoBuildJob.java:154)
	at org.eclipse.core.internal.events.AutoBuildJob.run(AutoBuildJob.java:244)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)
!SUBENTRY 1 org.eclipse.core.resources 4 368 2021-02-11 15:43:37.661
!MESSAGE File not found: /Users/edwardblurock/git/JThermodynamics2/JThermodynamicData/target/JThermodynamicData-1.0/WEB-INF/classes/thermo/build/test/CorrectionElementTests.class.
!STACK 0
java.lang.Exception: File not found: /Users/edwardblurock/git/JThermodynamics2/JThermodynamicData/target/JThermodynamicData-1.0/WEB-INF/classes/thermo/build/test/CorrectionElementTests.class.
	at org.eclipse.core.internal.resources.ResourceException.provideStackTrace(ResourceException.java:42)
	at org.eclipse.core.internal.resources.ResourceException.<init>(ResourceException.java:38)
	at org.eclipse.core.internal.localstore.FileSystemResourceManager.read(FileSystemResourceManager.java:835)
	at org.eclipse.core.internal.resources.File.getContents(File.java:275)
	at org.eclipse.jdt.internal.core.util.Util.getResourceContentsAsByteArray(Util.java:1157)
	at org.eclipse.jdt.internal.core.builder.IncrementalImageBuilder.writeClassFileCheck(IncrementalImageBuilder.java:942)
	at org.eclipse.jdt.internal.core.builder.IncrementalImageBuilder.writeClassFileContents(IncrementalImageBuilder.java:884)
	at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.writeClassFile(AbstractImageBuilder.java:879)
	at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.acceptResult(AbstractImageBuilder.java:203)
	at org.eclipse.jdt.internal.compiler.Compiler.processCompiledUnits(Compiler.java:615)
	at org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:475)
	at org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:426)
	at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile(AbstractImageBuilder.java:386)
	at org.eclipse.jdt.internal.core.builder.IncrementalImageBuilder.compile(IncrementalImageBuilder.java:371)
	at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile(AbstractImageBuilder.java:318)
	at org.eclipse.jdt.internal.core.builder.IncrementalImageBuilder.incrementalBuildLoop(IncrementalImageBuilder.java:190)
	at org.eclipse.jdt.internal.core.builder.IncrementalImageBuilder.build(IncrementalImageBuilder.java:147)
	at org.eclipse.jdt.internal.core.builder.JavaBuilder.buildDeltas(JavaBuilder.java:292)
	at org.eclipse.jdt.internal.core.builder.JavaBuilder.build(JavaBuilder.java:212)
	at org.eclipse.core.internal.events.BuildManager$2.run(BuildManager.java:832)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.core.internal.events.BuildManager._basicBuild(BuildManager.java:220)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:147)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:263)
	at org.eclipse.core.internal.events.BuildManager$1.run(BuildManager.java:316)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:319)
	at org.eclipse.core.internal.events.BuildManager.basicBuildLoop(BuildManager.java:371)
	at org.eclipse.core.internal.events.BuildManager.build(BuildManager.java:392)
	at org.eclipse.core.internal.events.AutoBuildJob.doBuild(AutoBuildJob.java:154)
	at org.eclipse.core.internal.events.AutoBuildJob.run(AutoBuildJob.java:244)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-02-11 15:43:37.673
!MESSAGE JavaBuilder handling CoreException
!STACK 1
org.eclipse.core.internal.resources.ResourceException(/JThermodynamicData/target/JThermodynamicData-1.0/WEB-INF/classes/thermo/LineCommands.class)[368]: java.lang.Exception: File not found: /Users/edwardblurock/git/JThermodynamics2/JThermodynamicData/target/JThermodynamicData-1.0/WEB-INF/classes/thermo/LineCommands.class.
	at org.eclipse.core.internal.resources.ResourceException.provideStackTrace(ResourceException.java:42)
	at org.eclipse.core.internal.resources.ResourceException.<init>(ResourceException.java:38)
	at org.eclipse.core.internal.localstore.FileSystemResourceManager.read(FileSystemResourceManager.java:835)
	at org.eclipse.core.internal.resources.File.getContents(File.java:275)
	at org.eclipse.jdt.internal.core.util.Util.getResourceContentsAsByteArray(Util.java:1157)
	at org.eclipse.jdt.internal.core.builder.IncrementalImageBuilder.writeClassFileCheck(IncrementalImageBuilder.java:942)
	at org.eclipse.jdt.internal.core.builder.IncrementalImageBuilder.writeClassFileContents(IncrementalImageBuilder.java:884)
	at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.writeClassFile(AbstractImageBuilder.java:879)
	at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.acceptResult(AbstractImageBuilder.java:203)
	at org.eclipse.jdt.internal.compiler.Compiler.processCompiledUnits(Compiler.java:615)
	at org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:475)
	at org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:426)
	at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile(AbstractImageBuilder.java:386)
	at org.eclipse.jdt.internal.core.builder.IncrementalImageBuilder.compile(IncrementalImageBuilder.java:371)
	at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile(AbstractImageBuilder.java:318)
	at org.eclipse.jdt.internal.core.builder.IncrementalImageBuilder.incrementalBuildLoop(IncrementalImageBuilder.java:190)
	at org.eclipse.jdt.internal.core.builder.IncrementalImageBuilder.build(IncrementalImageBuilder.java:147)
	at org.eclipse.jdt.internal.core.builder.JavaBuilder.buildDeltas(JavaBuilder.java:292)
	at org.eclipse.jdt.internal.core.builder.JavaBuilder.build(JavaBuilder.java:212)
	at org.eclipse.core.internal.events.BuildManager$2.run(BuildManager.java:832)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.core.internal.events.BuildManager._basicBuild(BuildManager.java:220)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:147)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:263)
	at org.eclipse.core.internal.events.BuildManager$1.run(BuildManager.java:316)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:319)
	at org.eclipse.core.internal.events.BuildManager.basicBuildLoop(BuildManager.java:371)
	at org.eclipse.core.internal.events.BuildManager.build(BuildManager.java:392)
	at org.eclipse.core.internal.events.AutoBuildJob.doBuild(AutoBuildJob.java:154)
	at org.eclipse.core.internal.events.AutoBuildJob.run(AutoBuildJob.java:244)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)
!SUBENTRY 1 org.eclipse.core.resources 4 368 2021-02-11 15:43:37.673
!MESSAGE File not found: /Users/edwardblurock/git/JThermodynamics2/JThermodynamicData/target/JThermodynamicData-1.0/WEB-INF/classes/thermo/LineCommands.class.
!STACK 0
java.lang.Exception: File not found: /Users/edwardblurock/git/JThermodynamics2/JThermodynamicData/target/JThermodynamicData-1.0/WEB-INF/classes/thermo/LineCommands.class.
	at org.eclipse.core.internal.resources.ResourceException.provideStackTrace(ResourceException.java:42)
	at org.eclipse.core.internal.resources.ResourceException.<init>(ResourceException.java:38)
	at org.eclipse.core.internal.localstore.FileSystemResourceManager.read(FileSystemResourceManager.java:835)
	at org.eclipse.core.internal.resources.File.getContents(File.java:275)
	at org.eclipse.jdt.internal.core.util.Util.getResourceContentsAsByteArray(Util.java:1157)
	at org.eclipse.jdt.internal.core.builder.IncrementalImageBuilder.writeClassFileCheck(IncrementalImageBuilder.java:942)
	at org.eclipse.jdt.internal.core.builder.IncrementalImageBuilder.writeClassFileContents(IncrementalImageBuilder.java:884)
	at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.writeClassFile(AbstractImageBuilder.java:879)
	at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.acceptResult(AbstractImageBuilder.java:203)
	at org.eclipse.jdt.internal.compiler.Compiler.processCompiledUnits(Compiler.java:615)
	at org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:475)
	at org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:426)
	at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile(AbstractImageBuilder.java:386)
	at org.eclipse.jdt.internal.core.builder.IncrementalImageBuilder.compile(IncrementalImageBuilder.java:371)
	at org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.compile(AbstractImageBuilder.java:318)
	at org.eclipse.jdt.internal.core.builder.IncrementalImageBuilder.incrementalBuildLoop(IncrementalImageBuilder.java:190)
	at org.eclipse.jdt.internal.core.builder.IncrementalImageBuilder.build(IncrementalImageBuilder.java:147)
	at org.eclipse.jdt.internal.core.builder.JavaBuilder.buildDeltas(JavaBuilder.java:292)
	at org.eclipse.jdt.internal.core.builder.JavaBuilder.build(JavaBuilder.java:212)
	at org.eclipse.core.internal.events.BuildManager$2.run(BuildManager.java:832)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.core.internal.events.BuildManager._basicBuild(BuildManager.java:220)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:147)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:263)
	at org.eclipse.core.internal.events.BuildManager$1.run(BuildManager.java:316)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:319)
	at org.eclipse.core.internal.events.BuildManager.basicBuildLoop(BuildManager.java:371)
	at org.eclipse.core.internal.events.BuildManager.build(BuildManager.java:392)
	at org.eclipse.core.internal.events.AutoBuildJob.doBuild(AutoBuildJob.java:154)
	at org.eclipse.core.internal.events.AutoBuildJob.run(AutoBuildJob.java:244)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)
